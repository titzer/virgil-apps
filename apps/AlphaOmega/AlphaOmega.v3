// arithmetic
// integers
// booleans
// void
// tuples
// string

// enums
//   .name
//   .tag

// variants
//   .tag
//   .name
//   deep equality
//   virtual methods
//   default values

// tuples
//   void
//   nested
//   arrays

// functions

// type matrix
// void
// bool
// int
// array
// function
// tuple
// class
// variant

def checkEq<A>(x: A, y: A) {
	if (x != y) return (1/0, ()).last;
}

class Holder<A>(field: A) { }
class Doer<A, B>(f: A -> B) {
	def apply(a: A) -> B { return f(a); }
}

class TVDoer<A, B> extends Doer<A, B> {
	new(f: A -> B) super(f) { }
	def apply(a: A) -> B { return func(a, ()); }
	def func(a: A, v: void) -> B { return f(a); }
}

class TVIDoer<A, B> extends Doer<A, B> {
	new(f: A -> B) super(f) { }
	def apply(a: A) -> B { return func(a, (), 45); }
	def func(a: A, v: void, x: int) -> B { return f(a); }
}

def runF<A, I, B>(f: A -> B, a: A, b: B, make: A -> I, get: I -> A) -> B {
	return f(get(make(a)));
}

def run<A, B>(f: A -> B, inputs: Array<A>) {
	var doers: Array<A -> B> = [
		f,
		Doer.new(f).apply,
		TVDoer.new(f).apply,
		TVIDoer.new(f).apply
	];

	for (i < inputs.length) {
		var a = inputs[i], b = f(a);
		for (d in doers) {
			checkEq(b, d(a));
		}
	}
}

def main(args: Array<string>) -> int {
	Arithmetic.run();
	return 0;
}
