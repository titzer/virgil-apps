def DEBUG = false;

def F32_MAX_BIASED_EXP = 255;
def F32_MIN_EXP = -127;
def F32_MAX_EXP = 128;
def F32_EXP_BIAS = 127;
def F32_EXP_MASK = 0xFFu;
def F32_SIGNIFICAND_SIZE: byte = 23;
def F32_SIGNIFICAND_MASK = (1u << F32_SIGNIFICAND_SIZE) - 1;
def F32_QUIET_MASK = 1u << (F32_SIGNIFICAND_SIZE - byte.!(1));
def F32_QUIET_NAN = (0xFFu << F32_SIGNIFICAND_SIZE) | F32_QUIET_MASK;
def F32_SIGN_BIT = 1u << 31;
def F32_MINUS_ZERO = 1u << 31;
def F32_NEG_INFINITY = 0xFF800000u;
def F32_POS_INFINITY = 0x7F800000u;
def F32_MIN_MANTISSA = 1u << F32_SIGNIFICAND_SIZE;
def F32_MAX_MANTISSA = F32_SIGNIFICAND_MASK | (1u << F32_SIGNIFICAND_SIZE);

// Get the sign of the number, with {-1} representing negative, {0} representing positive.
def sign(a: u32) -> int {
	return int.!(a) >> 31;
}
// Get the unbiased exponent from the number.
def exponent(a: u32) -> int {
	var biased_exp = int.!((a >>> F32_SIGNIFICAND_SIZE) & F32_EXP_MASK);
	return if(biased_exp == 0, F32_MIN_EXP, biased_exp - F32_EXP_BIAS);  // handle subnormal numbers
}
// Get the mantissa of the number as a signed, two's complement integer.
// Returns {0} for {+/-Infinity} or {NaN}.
def mantissa(a: u32) -> int {
	var biased_exp = (a >>> F32_SIGNIFICAND_SIZE) & F32_EXP_MASK;
	var significand = int.!(a & F32_SIGNIFICAND_MASK);
	if (biased_exp == F32_MAX_BIASED_EXP) return 0; // Infinity or NaN
	if (biased_exp != 0) significand |= (1 << F32_SIGNIFICAND_SIZE);  // subnormal numbers have leading zeroes
	return if (a < 0, 0 - significand, significand);
}
// Return {true} if the input is not a number.
def isnan(a: u32) -> bool {
	var biased_exp = (a >>> F32_SIGNIFICAND_SIZE) & F32_EXP_MASK;
	return (biased_exp >= F32_MAX_BIASED_EXP) && (a & F32_SIGNIFICAND_MASK) != 0;
}
// Return {-1} if the input is negative infinity, {1} if positive infinity, 0 otherwise.
def infinity(a: u32) -> int {
	var biased_exp = (a >>> F32_SIGNIFICAND_SIZE) & F32_EXP_MASK;
	if (biased_exp == F32_MAX_BIASED_EXP) return int.!(a) >> 31;
	return 0;
}

// Compute {a - b} in single-precision floating point.
def f32_sub(a: u32, b: u32) -> u32 {
	return f32_add(a, b ^ F32_SIGN_BIT);
}
// Compute {a + b} in single-precision floating point.
def f32_add(a: u32, b: u32) -> u32 {
	if (b == 0 || b == F32_MINUS_ZERO) return a;
	if (a == 0) return b;                
	if (isnan(a)) return F32_QUIET_NAN;  // NaN + y = NaN
	if (isnan(b)) return F32_QUIET_NAN;  // x + NaN = NaN
	var a_inf = infinity(a), b_inf = infinity(b);
	if ((a_inf | b_inf) != 0) {
		if (a_inf != b_inf) return F32_QUIET_NAN;  // Infinity + -Infinity = NaN
		return if(a_inf != 0, a, b);
	}
	
	var a_exp = exponent(a), b_exp = exponent(b);
	var a_m = mantissa(a), b_m = mantissa(b);
	if (DEBUG) {
		var buf = StringBuilder.new();
		buf.puts(" a_exp = ").putd(a_exp);
		buf.puts(" b_exp = ").putd(b_exp);
		buf.puts(" a_m = ").putd(a_m);
		buf.puts(" b_m = ").putd(b_m);
		System.puts(buf.ln().toString());
	}
	if (a_exp < b_exp) {
		var a_mx = roundOff(a_m, byte.!(b_exp - a_exp));
		if (DEBUG) printMantissa("+", a_mx, b_m, a_mx + b_m);
		return f32_rtn(b_exp, a_mx + b_m);
	} else {
		var b_mx = roundOff(b_m, byte.!(a_exp - b_exp));
		if (DEBUG) printMantissa("+", a_m, b_mx, b_mx + a_m);
		return f32_rtn(a_exp, b_mx + a_m);
	}
}
def roundOff(a: int, bits: byte) -> int {
	if (DEBUG) {
		System.puts("round off: ");
		System.puti(a);
		System.putc(',');
		System.puti(bits);
		System.ln();
	}
	if ((a & ((1 << bits) - 1)) != 0) return 1 + a >> bits;
	return a >> bits;
}
// Compute {a * b} in single-precision floating point.
def f32_mul(a: u32, b: u32) -> u32 {
	if (isnan(a)) return F32_QUIET_NAN;  // NaN * y = NaN
	if (isnan(b)) return F32_QUIET_NAN;  // x * NaN = NaN
	var inf = infinity(a) * infinity(b);
	if (inf < 0) return F32_NEG_INFINITY;
	if (inf > 0) return F32_POS_INFINITY;
	
	var a_m: long = mantissa(a & ~F32_SIGN_BIT), b_m: long = mantissa(b & ~F32_SIGN_BIT);
	var ab_sign = (a ^ b) & F32_SIGN_BIT;
	return ab_sign | f32_rtn(exponent(a) + exponent(b) - F32_SIGNIFICAND_SIZE, a_m * b_m);
}
// Compute {a / b} in single-precision floating point.
def f32_div(a: u32, b: u32) -> u32 {
	if (isnan(a)) return F32_QUIET_NAN;  // NaN + y = NaN
	if (isnan(b)) return F32_QUIET_NAN;  // x + NaN = NaN
	var ab_sign = (a ^ b) & F32_SIGN_BIT;
	var a_inf = infinity(a), b_inf = infinity(b);
	if (a_inf != 0) {
		if (b_inf != 0) return F32_QUIET_NAN;
		return ab_sign | F32_POS_INFINITY;
	}
	if (b_inf != 0) return ab_sign; // x / Infinity = 0
	var b_m: long = mantissa(b & ~F32_SIGN_BIT) << F32_SIGNIFICAND_SIZE;
	if (b_m == 0) return ab_sign | F32_POS_INFINITY;  // x / 0 = Infinity
	var a_m: long = mantissa(a & ~F32_SIGN_BIT) << F32_SIGNIFICAND_SIZE;
	return ab_sign | f32_rtn(exponent(a) - exponent(b), a_m / b_m);
}
// Round a given floating point number to the nearest representable number,
// which may be positive or negative infinity.
def f32_rtn(exp: int, mantissa: long) -> u32 {
	if (mantissa == 0) return 0;
	var sign = 0u;
	if (mantissa < 0) {
		sign = F32_SIGN_BIT;
		mantissa = 0 - mantissa;  // undo two's complement mantissa
	}
	if (mantissa > F32_MAX_MANTISSA) {
		// Shift mantissa down and increase exponent.
		var last = 0l;
		while (mantissa > F32_MAX_MANTISSA) {
			exp++;
			last = mantissa & 1;
			mantissa >>= 1;
		}
		mantissa += last;  // round up if necessary
		if (mantissa > F32_MAX_MANTISSA) {
			exp++;
			mantissa >>= 1;
		}
		if (exp >= F32_MAX_EXP) {
			// Overflow. Produce infinity.
			exp = F32_MAX_EXP;
			mantissa = 0;
		}
	}
	// Shift mantissa up and decrease exponent.
	while (mantissa < F32_MIN_MANTISSA) {
		if (exp == F32_MIN_EXP) break;  // Underflow. Produce subnormal.
		exp--;
		mantissa <<= 1;
	}
	if (exp == F32_MIN_EXP && mantissa >= F32_MIN_MANTISSA) {
		// Special case of subnormal->normal representation
		exp++;
	}
	return sign | (u32.!(exp + F32_EXP_BIAS) << F32_SIGNIFICAND_SIZE) | (u32.!(mantissa) & F32_SIGNIFICAND_MASK);
}
def buf = StringBuilder.new();
def printMantissa(op: string, a: int, b: int, result: int) {
	buf.reset();
	buf.puts(op);
	buf.puts("(");
	printBits(a, F32_SIGNIFICAND_SIZE + byte.!(2));
	buf.puts(", ");
	printBits(b, F32_SIGNIFICAND_SIZE + byte.!(2));
	buf.puts(") = ");
	printBits(result, F32_SIGNIFICAND_SIZE + byte.!(2));
	buf.ln();
	System.puts(buf.toString());
}
def printBits(a: int, size: byte) {
	for (i = 1 << byte.!(size - 1); i != 0; i >>= 1) {
		buf.putc(if((a & i) != 0, '1', '0'));
	}
}
def print(a: u32) {
	buf.reset();
	if (sign(a) < 0) buf.putc('1');	
	else buf.putc('0');
	buf.sp();
	buf.putd(exponent(a));
	buf.sp();
	printBits(int.!(a), F32_SIGNIFICAND_SIZE);
	
	if (isnan(a)) buf.puts(" NaN");
	else if (infinity(a) == 1) buf.puts(" Infinity");
	else if (infinity(a) == -1) buf.puts(" -Infinity");
	else if (a == F32_MINUS_ZERO) buf.puts(" -0");

	System.puts(buf.toString());
}
def main(args: Array<string>) -> int {
	if (true) {
		run();
		return 0;
	}
	if (args.length < 2) {
		System.puts("Usage: SoftFp <a> <b>\n");
		return 1;
	}
	var ap = Ints.parseDecimal(args[0], 0);
	var bp = Ints.parseDecimal(args[1], 0);
	var result = f32_add(u32.!(ap.1), u32.!(bp.1));
	print(result);
	return 0;
}
def doOp(op: string, f: (u32, u32) -> u32, a: u32, b: u32) {
	var result = f32_add(a, b);
	print(a);
	System.puts(op);
	print(b);
	System.puts(" = ");
	print(result);
	System.ln();
}
class Values {
	var counter = 0;
	def next() -> int {
		var i = counter++;
		var low = i & 0x7;
		var fill = ((i >> 1) & 0x1) * (0x1FFFF << 3);
		var mid = ((i >> 4) & 0x7) << 20;
		var exp = ((i >> 7) & 0x3) << 23;
		var bits = exp | mid | fill | low;
		return bits;
	}
	def hasNext() -> bool {
		return counter <= 0x1ff;
	}
}
def run() {
//	doOp(" + ", f32_add, 7798566, 1000u + 3003115u);
	doOp(" + ", f32_add, 7798566, 1000u + 3u * 3003115u);
	for (a = Values.new(); a.hasNext(); ()) {
		var i = a.next();
		for (b = Values.new(); b.hasNext(); ()) {
			var j = b.next();
			doOp(" + ", f32_add, u32.!(i), u32.!(j));
		}
	}
}
