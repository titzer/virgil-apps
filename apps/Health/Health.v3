// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Virgil implementation of the <tt>health</tt> Olden benchmark.
//
// The Olden benchmark simulates the Columbian health-care system:
// G. Lomow , J. Cleary, B. Unger, and D. West. "A Performance Study of
// Time Warp," In SCS Multiconference on Distributed Simulation, pages 50-55,
// Feb. 1988.

// some mysterious constant.
def IQ = 127773;

// an array list
class List<T> {
	var array: Array<T>;
	var length: int;
	
	// add an item to the end of this list
	def add(item: T) {
		var s = length;
		if (s == 0) array = Array<T>.new(10);
		else if (s == array.length) {
			var n = Array<T>.new(s + s), max = array.length;
			for (i < max) n[i] = array[i];
			array = n;
		}
		array[s] = item;
		length = s + 1;
	}
	// clear this list
	def clear() {
		length = 0;
	}
	def iterator() -> Iterator<T> {
		return Iterator.new(this);
	}
}

// an iterator over a list
class Iterator<T> {
	def list: List<T>;
	var index: int;
	var removed: bool;
	new(list) { }
	def hasNext() -> bool {
		if (index < list.length) return true;
		else if (removed) compact();
		return false;
	}
	def next() -> T {
		return list.array[index++];
	}
	def remove() {
		var nil: T;
		list.array[index - 1] = nil;
		removed = true;
	}
	def compact() {
		// remove nil's
		var nil: T, j = 0, removed = 0;
		for (i < list.length) {
			var item = list.array[i];
			if (item != nil) list.array[j++] = item;
			else removed++;
		}
		list.length = list.length - removed;
	}
}

// A class representing a hospital in the Columbian health care system.
class Hospital {
	var zillesTime: int;
	var personnel: int;
	var freePersonnel: int;
	var numWaitingPatients: int;
	def waiting = List<Patient>.new();
	def assess = List<Patient>.new();
	def inside = List<Patient>.new();
	def up = List<Patient>.new();

	new(level: int) {
		personnel = 1 << byte.!(level - 1);
		freePersonnel = personnel;
	}

	// Add a patient to this hospital
	def putInHospital(p: Patient) {
		var num = p.hospitalsVisited;
		p.hospitalsVisited++;
		if (freePersonnel > 0) {
			freePersonnel--;
			assess.add(p);
			p.timeLeft = 3;
			p.time = p.time + 3;
		} else {
			p.timeLeft = zillesTime;
			waiting.add(p);
		}
	}

	// Check the patients inside the hospital to see if any are finished.
	// If so, then free up the personnel and and the patient to the returned list.
	def checkPatientsInside(returned: List<Patient>) {
		var ii = this.inside.iterator();
		while (ii.hasNext()) {
			var p = ii.next();
			p.timeLeft--;
			if (p.timeLeft == 0) {
				freePersonnel = freePersonnel + 1;
				ii.remove();
				returned.add(p);
			}
		}
	}

	// Assess the patients in the village.
	def checkPatientsAssess(v: Village) -> List<Patient> {
		var stayhere: bool;
		var up = List<Patient>.new();

		var ii = this.assess.iterator();
		while (ii.hasNext()) {
			var p = ii.next();
			p.timeLeft--;
			if (p.timeLeft == 0) {
				ii.remove();
				if (choose(9, 10) || v.rootVillage) {
					inside.add(p);
					p.timeLeft = 10;
					p.time = p.time + 10;
				} else {
					freePersonnel = freePersonnel + 1;
					up.add(p);
				}
			}
		}
		return up;
	}

	def checkPatientsWaiting() {
		var ii = this.waiting.iterator();
		while (ii.hasNext()) {
			var p = ii.next();
			if (freePersonnel > 0) {
				freePersonnel--;
				p.time = p.time + (3 + this.zillesTime - p.timeLeft); //health harmful
				p.timeLeft = 3;
				ii.remove();
				assess.add(p);
			}
		}

		this.zillesTime++;
	}
}

// A class that represents a patient in the health care system.
class Patient {
	var hospitalsVisited: int;
	var time: int;
	var timeLeft: int;
}

// A class represnting a village in the Columbian health care system simulation.
class Village {
	var forward: Array<Village>;
	var rootVillage: bool;
	var returned = List<Patient>.new();
	var hospital: Hospital;
	var label: int;
	var seed: int;

	// Construct an empty village
	// level the level of the village
	// lab	 the unique label for the village
	// p		 a reference to the "parent" village
	// s		 the user supplied seed value
	new(level: int, l: int, isRootV: bool, s: int) {
		rootVillage = isRootV;
		label = l;
		forward = Array<Village>.new(4);
		seed = label * (IQ + s);
		hospital = Hospital.new(level);
	}

	// Simulate the Columbian health care system for a village.
	// @return a list of patients refered to the next village
	def simulate() -> List<Patient> {
		// the list of patients refered from each child village
		var val = List<Patient>.new();
		var p: Patient;

		for (v in forward) {
			val.clear();
			if (v != null) val = v.simulate();

			var pi = val.iterator();
			while (pi.hasNext()) {
				hospital.putInHospital(pi.next());
			}
		}

		hospital.checkPatientsInside(returned);
		var up = hospital.checkPatientsAssess(this);
		hospital.checkPatientsWaiting();

		// generate new patients
		p = generatePatient();
		if (p != null) {
			hospital.putInHospital(p);
		}

		return up;
	}

	// Summarize results of the simulation for the Village
	def getResults() -> Results {
		var fval = List<Results>.new();
		for (v in forward) {
			if (v != null) fval.add(v.getResults());
		}

		var r = Results.new();
		var fi = fval.iterator();
		while (fi.hasNext()) {
			var f = fi.next();
			r.totalHospitals = r.totalHospitals + f.totalHospitals;
			r.totalPatients = r.totalPatients + f.totalPatients;
			r.totalTime = r.totalTime + f.totalTime;
		}
		var ii = this.returned.iterator();
		while (ii.hasNext()) {
			var p = ii.next();
			r.totalHospitals = r.totalHospitals + p.hospitalsVisited;
			r.totalTime = r.totalTime + p.time;
			r.totalPatients++;
		}
		return r;
	}

	// Try to generate more patients for the village.
	// @return a new patient or null if a new patient isn't created
	def generatePatient() -> Patient {
		return if(choose(1, 3), Patient.new());
	}
}

// A class to contains the results from the health care simulation.
class Results {
	var totalPatients: int;
	var totalTime: int;
	var totalHospitals: int;
}

def choose(num: int, denom: int) -> bool {
	return Random.random(denom) < num;
}

// Create a set of villages. Villages are represented as a quad tree.
// Each village contains references to four other villages. Users
// specify the number of levels.
//
// @param level the number of level of villages.
// @param label a unique label for the village
// @param back	a link to the "parent" village
// @param seed	the user supplied seed value.
// @return the village that was created
def createVillage(level: int, label: int, isRootV: bool, seed: int) -> Village {
	if (level == 0) {
		return null;
	} else {
		var village = Village.new(level, label, isRootV, seed);
		for (i = 3; i >= 0; i--) {
			var child = createVillage(level - 1, (label * 4) + i + 1, false, seed);
			village.forward[i] = child;
		}
		return village;
	}
}

// The main routine which creates the data structures for the Columbian
// health-care system and executes the simulation for a specified time.
def main(args: Array<string>) {
	var hsize = 5;
	var simtime = Util.intArg(args, 20);
	var top = createVillage(hsize, 0, true, 1);

	for (i < simtime) {
		top.simulate();
	}

	var r = top.getResults();

	println("# People treated: ", r.totalPatients, 1);
	println("Avg. length of stay: ", r.totalTime, r.totalPatients);
	println("Avg. # of hospitals visited: ", r.totalHospitals, r.totalPatients);
}

def println(str: string, val: int, denom: int) {
	System.puts(str);
	if (denom == 0) {
		System.puts("NaN");
	} else {
		System.puti(val / denom); // TODO: show fractional part
	}
	System.putc('\n');
}
