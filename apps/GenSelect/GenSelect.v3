def target = "The quick brown fox jumps over the lazy dog.";
def main(args: Array<string>) {
	for (file in args) {
		var data = System.fileLoad(file);
		if (data != null) {
			System.puts("Generating ");
			System.puts(file);
			System.puts("...");
			generate(data);
		}
	}
}
def generate(target: Array<byte>) {
	if (true) return generateByChunks(target);
	def buffer = Array<byte>.new(target.length);
	for (iter < 2000000000) {
		var correct = buffer.length;
		for (i < buffer.length) {
			if (buffer[i] != target[i]) {
				buffer[i] = byte.!(Random.next());
				correct--;
			}
		}
		System.puti(iter);
		System.puts(": ");
		System.puti((100 * correct) / target.length);
		System.puts("%\n");
		if (correct >= target.length) break;
	}
	
}

// The size of the chunk buffer.
def VERIFY = true;
def TRACE = false;
def CHUNK_SIZE = 254;
// The buffer into which random data is generated.
def chunk = Array<byte>.new(CHUNK_SIZE);
// A singly-linked list of indexes into {chunk} which don't match the target data.
// Note that {list[0]} is the head of the list, and each index stored in {list}
// actually represents the position {index - 1} in the chunk data.
def list = Array<byte>.new(CHUNK_SIZE + 1);

// Randomly generate data until it matches the data in {target}.
def generateByChunks(target: Array<byte>) {
	var offset = 0;
	while (offset < target.length) {
		offset += doChunk(target, offset);
	}
}
// Randomly generate a chunk of data of size {min(target.length - offset, CHUNK_SIZE)}
// until the chunk matches the data in {target} starting at {offset}.
def doChunk(target: Array<byte>, offset: int) -> int {
	var before = System.ticksUs();
	var length = target.length - offset;
	if (length > CHUNK_SIZE) length = CHUNK_SIZE;
	for (i < list.length) list[i] = byte.!(i + 1);
	var correct = 0;
	while (correct < length) {
		correct += doOnePassOnChunk(target, offset, length);
	}
	if (VERIFY) {
		if (TRACE) System.puts("--verify--\n");
		for (i = 0; i < length; i++) {
			if (target[offset + i] != chunk[i]) System.error("InternalError", "chunk does not match");
		}
	}
	var time = System.ticksUs() - before;
	System.puts("chunk time: ");
	System.puti(int.!(time));
	System.ln();
	return length;
}
// Do a single pass over the chunk, updating the data in {chunk} as well
// as removing entries from {list}.
def doOnePassOnChunk(target: Array<byte>, offset: int, length: int) -> int {
	var i = 0, prev = i, hits = 0;
	while (true) {
		var pos = list[i];
		if (pos > length) break;
		var val = byte.!(Random.next());
		if (TRACE) {
			System.puts("try chunk[");
			System.puti(pos - 1);
			System.puts("] data[");
			System.puti(offset + pos - 1);
			System.puts("] ");
		}
		if (val == target[offset + pos - 1]) {
			if (TRACE) System.puts(" (hit)\n");
			hits++;
			chunk[pos - 1] = val;
			var next = list[pos];
			list[prev] = next;
		} else {
			if (TRACE) System.ln();
			prev = pos;
		}
		i = pos;
	}
	return hits;
}
def print(x: Array<byte>) {
	for (i < x.length) {
		var ch = x[i];
		if (ch >= 32 && ch < 128) System.putc(ch);
		else System.putc('.');
	}
}
