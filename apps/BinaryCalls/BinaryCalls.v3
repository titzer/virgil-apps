// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component BinaryCalls {
	def main(args: Array<string>) -> int {
		if (args.length < 2) {
			System.puts("Usage: BinaryCalls <0|1|2|3> <depth>\n");
			return 1;
		}
		var which = Int.parse(args[0]);
		var depth = Int.parse(args[1]);
		match (which) {
			0 => call0(depth, -9, -10, 1234);
			1 => call1(depth, -9, -10, 1234);
			2 => X.new().call2(depth, -9, -10, 1234);
			3 => X.new().call3(depth, -9, -10, 1234);
		} else {
			// run them all
			call0(depth, -9, -10, 1234);
			call1(depth, -9, -10, 1234);
			X.new().call2(depth, -9, -10, 1234);
			X.new().call3(depth, -9, -10, 1234);
		}
		return 0;
	}
	def call0(depth: int, a: int, b: int, c: int) {
		if (depth <= 0) return ();
		call0(depth - 1, a, b, c);
		call0(depth - 1, a, b, c);
	}
	def call1<T>(depth: int, a: T, b: T, c: int) {
		if (depth <= 0) return ();
		call1(depth - 1, a, b, c);
		call1(depth - 1, a, b, c);
	}
}

class X {
	def call2(depth: int, a: int, b: int, c: int) {
		if (depth <= 0) return ();
		call2(depth - 1, a, b, c);
		call2(depth - 1, a, b, c);
	}
	def call3<T>(depth: int, a: T, b: T, c: int) {
		if (depth <= 0) return ();
		call3(depth - 1, a, b, c);
		call3(depth - 1, a, b, c);
	}
}
