type Key {
	case None;
	case Int(v: int);
	case Float(v: float);

	def hash() -> int {
		match (this) {
			None => return 0;
			Int(v) => return int.view(v);
			Float(v) => return int.view(v);
		}
	}
}

def times = false;
var count: int;
def main(args: Array<string>) {
	def iterations = if (args.length > 0, Int.parse(args[0]), 10);
	count = if(args.length > 1, Int.parse(args[1]), 100000);
	for (i < iterations) run();
}

def run() {
	var map = HashMap<Key, int>.new(Key.hash, Key.==);
	for (i < count) {
		var val = 11 + count;
		map[Key.None] = val;
		map[Key.Int(33)] = val;
		map[Key.Int(-99933)] = val;
		map[Key.Float(33.4f)] = val;
		map[Key.Float(-7733.4f)] = val;
	}
	var sum = 0;
	for (i < count) {
		sum += map[Key.None];
		sum += map[Key.Int(33)];
		sum += map[Key.Int(-99933)];
		sum += map[Key.Float(33.4f)];
		sum += map[Key.Float(-7733.4f)];
	}
}

// A general-purpose HashMap implementation that provides the PartialMap interface.
// For maximum reusability, this implementation accepts the hash and equality functions
// as delegates, and thus can map any key type to any def type.
class HashMap<K, V> {
	def hash: K -> int;			// user-supplied hash function
	def equals: (K, K) -> bool;		// user-supplied equality method
	var table: Array<Bucket<K, V>>;	// lazily allocated hashtable
	var cache: Bucket<K, V>;		// cache for last entry get/set

	new(hash, equals) { }
	def [key: K] -> V {
		var c = cache;
		if (c == null) { var none: V; return none; }
		// cache is valid, must be at least one entry
		if (c.key == key) return c.val;
		// if table is null, there is only one key/def pair
		if (table == null) {
			if (equals(c.key, key)) return c.val; // a slow hit in the cache
			var none: V; 
			return none;
		}
		// cache did not match, hash and do bucket search
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) {
				cache = bucket;
				return bucket.val;
			}
		}
		var none: V;
		return none;
	}
	def [key: K] = val: V {
		var c = cache;
		if (c == null) {
			// no entries yet, simply add it as the cache
			cache = Bucket<K, V>.new(key, val, null);
			return;
		}
		if (c.key == key) {
			// ==, a fast hit in the cache
			c.val = val;
			return;
		}
		if (table == null) {
			if (equals(c.key, key)) {
				// equals(), a slow hit in the cache
				c.val = val;
				return;
			}
			// missed the cache, table not yet allocated, insert both
			table = Array.new(11); // TUNABLE: initial HashMap table size
			insert(c);
			insert(cache = Bucket.new(key, val, null));
			return;
		}
		// missed the cache, hash and search the table
		var hashval = dohash(key);
		var i = 0;
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				cache = bucket;
				return;
			}
			i++;
		}
		// insert into table and cache
		table[hashval] = cache = Bucket.new(key, val, table[hashval]);
		if (i > 4 && table.length < 1001) balance();
	}
	def has(key: K) -> bool {
		var c = cache;
		if (c == null) return false; // no entries
		if (c.key == key) return true; // hit cache
		if (table == null) return equals(c.key, key); // no table, slow hit cache?
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) return true;
		}
		return false;
	}
	def apply(func: (K, V) -> void) {
		if (table == null) {
			// zero or one entry
			if (cache != null) func(cache.key, cache.val);
			return;
		}
		// two or more entries
		for (b in table) {
			for (bucket = b; bucket != null; bucket = bucket.next) {
				func(bucket.key, bucket.val);
			}
		}
	}
	private def insert(bucket: Bucket<K, V>) {
		var hashval = dohash(bucket.key);
		bucket.next = table[hashval];
		table[hashval] = bucket;
	}
	private def dohash(key: K) -> int {
		return int.!(2147483647 & hash(key)) % table.length;
	}
	private def balance() {
		var old = table;
		var nlen = table.length * 3 + 1;
		table = Array.new(nlen);
		for (i < old.length) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = Bucket.new(b.key, b.val, table[hashval]);
			}
		}
	}
	def count() -> int {
		var cnt = 0;
		for (bucket in table) {
			for (b = bucket; b != null; b = b.next) cnt++;
		}
		return cnt;
	}
}

// Internal data structure needed by HashMap to represent chained buckets.
class Bucket<K, V> {
	def key: K;
	var val: V;
	var next: Bucket<K, V>;

	new(key, val: V, next: Bucket<K,V>) {
		this.next = next;
		this.val = val;
	}
}
