// Copyright 2020 Ben L. Titzer. All rights reserved.

// Virgil implementation of the "partialsums" benchmark from the Computer Language Shootout.
// A straightforward translation from the C version.

def printd9(v: double) {  // XXX: factor out into Common.v3
	var bits = u64.view(v);
	if ((bits >> 63) != 0) System.putc('-');
	v = double.view(bits & ~(1uL << 63));
	if (v == double.infinity) return System.puts("Infinity");
	if (v != v) return System.puts("NaN");
	var mag = 1d;
	while ((mag * 10d) < v) mag = mag * 10d;
	while (mag > 1e-9) {
		var digit = int.truncd(v / mag);
		System.puti(digit);
		if (mag == 1d) System.putc('.');
		v -= mag * digit;
		mag = mag / 10;
	}
	// TODO: round last digit properly
}

def print(v: double, str: string) {
	printd9(v);
	System.putc('\t');
	System.puts(str);
	System.ln();
}

def sin(v: double) -> double {
	return v; // TODO: implement sin() function
}

def cos(v: double) -> double {
	return v; // TODO: implement cos() function
}

def main(args: Array<string>) -> int {
	var n = Util.intArg(args, 1);
	var sum = 0.0d;

	sum = 0.0;
	for (k = 0; k <= n; k++) {	/* pow(2.0/3.0, double.roundi(k)) inlined */
		var x = 1.0, q = 0.6666666666666666;
		var j = k;
		while (true) { if ((j & 1) != 0) x *= q; if ((j >>= 1) == 0) break; q = q*q; }
		sum += x;
	}
	print(sum, "(2/3)^k");

	sum = 0.0;
	for (k = 1; k <= n; k++) sum += 1.0/double.sqrt(k);	/* aka pow(k, -0.5) */
	print(sum, "k^-0.5");

	sum = 0.0;
	for (k = 1; k <= n; k++) {
		var kd = double.roundi(k);
		sum += 1.0/(kd*(kd+1.0));
	}
	print(sum, "1/k(k+1)");

	sum = 0.0;
	for (k = 1; k <= n; k++) {
		var kd = double.roundi(k);
		var sk = sin(k);
		sum += 1.0/(kd*kd*kd*sk*sk);
	}
	print(sum, "Flint Hills");

	sum = 0.0;
	for (k = 1; k <= n; k++) {
		var kd = double.roundi(k);
		var ck = cos(k);
		sum += 1.0/(kd*kd*kd*ck*ck);
	}
	print(sum, "Cookson Hills");

	sum = 0.0;
	for (k = 1; k <= n; k++) sum += 1.0/k;
	print(sum, "Harmonic");

	sum = 0.0;
	for (k = 1; k <= n; k++) sum += 1.0/(k*k);
	print(sum, "Riemann Zeta");

	sum = 0.0;
	for (k = 1; k <= n-1; k += 2) sum += 1.0/k;
	for (k = 2; k <= n; k += 2) sum -= 1.0/k;
	print(sum, "Alternating Harmonic");

	sum = 0.0;
	for (k = 1; k <= 2*n-1; k += 4) sum += 1.0/k;
	for (k = 3; k <= 2*n; k += 4) sum -= 1.0/k;
	print(sum, "Gregory");

	return 0;
}
