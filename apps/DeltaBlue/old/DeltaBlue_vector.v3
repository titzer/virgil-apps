// DeltaBlue constraint solver, based on the Java version by Mario Wolczko.
// by Ben L. Titzer
component DeltaBlue {
	var planner: Planner;

	def main(args: Array<string>) -> int {
		var iterations = Util.intArg(args, 1);
		for (i = 0; i < iterations; i++) {
			chainTest(100);
			projectionTest(100);
		}
		return 0;
	}
	def chainTest(n: int) {
		planner = Planner.new();

		var prev: Variable, first: Variable, last: Variable;

		// Build chain of n equality constraints
		for (i = 0; i <= n; i++) {
			var v = newVar(name("v", i), i);
			if (prev != null) EqualityConstraint.new(prev, v, Strengths.required);
			if (i == 0) first = v;
			if (i == n) last = v;
			prev = v;
		}

		StayConstraint.new(last, Strengths.strongDefault);
		var editC = EditConstraint.new(first, Strengths.preferred);
		var editV = Vector<Constraint>.new(50);
		editV.addElement(editC);
		var plan = planner.extractPlanFromConstraints(editV);
		for (i = 0; i < 100; i++) {
			first.val = i;
			plan.execute();
			if (last.val != i) error("Chain test failed!");
		}
		editC.destroyConstraint();
	}
	def projectionTest(n: int) {
		planner = Planner.new();

		var scale = newVar("scale", 10);
		var offset = newVar("offset", 1000);
		var src: Variable, dst: Variable;

		var dests = Vector<Variable>.new(50);

		for (i = 0; i < n; ++i) {
			src = newVar(name("src", i), i);
			dst = newVar(name("dst", i), i);
			dests.addElement(dst);
			StayConstraint.new(src, Strengths.normal);
			ScaleConstraint.new(src, scale, offset, dst, Strengths.required);
		}

		change(src, 17);
		if (dst.val != 1170) error("Projection test 1 failed!");

		change(dst, 1050);
		if (src.val != 5) error("Projection test 2 failed!");

		change(scale, 5);
		for (i = 0; i < n - 1; ++i) {
			if ((dests.elementAt(i)).val != i * 5 + 1000) error("Projection test 3 failed!");
		}

		change(offset, 2000);
		for (i = 0; i < n - 1; ++i) {
			if ((dests.elementAt(i)).val != i * 5 + 2000) error("Projection test 4 failed!");
		}
	}
	def change(v: Variable, newValue: int) {
		var editC = EditConstraint.new(v, Strengths.preferred);
		var editV = Vector<Constraint>.new(1);
		editV.addElement(editC);
		var plan = planner.extractPlanFromConstraints(editV);
		for (i = 0; i < 10; i++) {
			v.val = newValue;
			plan.execute();
		}
		editC.destroyConstraint();
	}
	def name(prefix: string, i: int) -> string {
		return prefix; // TODO: append the int to the end
	}
	def error(msg: string) {
		System.error("DeltaBlueError", msg);
	}
	def newVar(name: string, id: int) -> Variable {
		return Variable.new(name, id, Strengths.weakest, 2);
	}
}

class Variable {
	def name: string;
	var val: int;
	var constraints: Vector<Constraint>;
	var determinedBy: Constraint;
	var mark: int;
	var walkStrength: Strength;
	var stay: bool;

	new(name, val, walkStrength, nconstraints: int) {
		stay = true;
		constraints = Vector.new(nconstraints);
	}
	def print() {
		System.puts(name);
		System.puts("(");
		walkStrength.print();
		System.puts(",");
		System.puti(val);
		System.puts(")");
	}
	def addConstraint(c: Constraint) {
		constraints.addElement(c);
	}
	def removeConstraint(c: Constraint) {
		constraints.removeElement(c);
		if (determinedBy == c) determinedBy = null;
	}
	def setValue(val: int, strength: Strength) {
		var e = EditConstraint.new(this, strength);
		if (e.isSatisfied()) {
			this.val = val;
			DeltaBlue.planner.propagateFrom(this);
		}
		e.destroyConstraint();
	}
}

// Measures the relative importance of a constraint.
class Strength {
	def strengthValue: int;
	def name: string;
	new(strengthValue, name) { }
	def print() {
		System.puts("strength[");
		System.puti(strengthValue);
		System.puts("]");
	}
}

// Utility methods for working with strengths, and an enumeration of values.
component Strengths {
	def required: Strength	= Strength.new(0, "required");
	def strongPreferred: Strength	= Strength.new(1, "strongPreferred");
	def preferred: Strength	= Strength.new(2, "preferred");
	def strongDefault: Strength	= Strength.new(3, "strongDefault");
	def normal: Strength		= Strength.new(4, "normal");
	def weakDefault: Strength	= Strength.new(5, "weakDefault");
	def weakest: Strength		= Strength.new(6, "weakest");

	def stronger(s1: Strength, s2: Strength) -> bool {
		return s1.strengthValue < s2.strengthValue;
	}
	def weaker(s1: Strength, s2: Strength) -> bool {
		return s1.strengthValue > s2.strengthValue;
	}
	def weakerOf(s1: Strength, s2: Strength) -> Strength {
		return if(weaker(s1, s2), s1, s2);
	}
	def strongest(s1: Strength, s2: Strength) -> Strength {
		return if(stronger(s1, s2), s1, s2);
	}
	def nextWeaker(s: Strength) -> Strength {
		match (s.strengthValue) {
			0: return strongPreferred;
			1: return preferred;
			2: return strongDefault;
			3: return normal;
			4: return weakDefault;
			5: return weakest;
		} else {
			System.error("DeltaBlueError", "Invalid call to nextStrength()");
			return null;
		}
	}
}

class Constraint {
	def strength: Strength;
	new(strength) { }

	def isSatisfied() -> bool;
	def markUnsatisfied();
	def isInput() -> bool { return false; }
	def addConstraint() {
		addToGraph();
		DeltaBlue.planner.incrementalAdd(this);
	}
	def destroyConstraint() {
		if (isSatisfied()) DeltaBlue.planner.incrementalRemove(this);
		removeFromGraph();
	}
	def addToGraph();
	def removeFromGraph();
	def chooseMethod(mark: int);
	def markInputs(mark: int);
	def inputsKnown(mark: int) -> bool;
	def output() -> Variable;
	def satisfy(mark: int) -> Constraint {
		chooseMethod(mark);
		if (!isSatisfied()) {
			if (strength == Strengths.required) DeltaBlue.error("Could not satisfy a required constraint");
			return null;
		}
		// constraint can be satisfied
		// mark inputs to allow cycle detection in addPropagate
		markInputs(mark);
		var out = output();
		var overridden = out.determinedBy;
		if (overridden != null) overridden.markUnsatisfied();
		out.determinedBy = this;
		if (!DeltaBlue.planner.addPropagate(this, mark)) {
			System.puts("Cycle encountered\n");
			return null;
		}
		out.mark = mark;
		return overridden;
	}
	def execute();
	def recalculate();
	def printInputs();
	def printOutput() {
		output().print();
	}
	def print() {
		if (!isSatisfied()) {
			System.puts("Unsatisfied");
		} else {
			System.puts("Satisfied(");
			printInputs();
			System.puts(" -> ");
			printOutput();
			System.puts(")");
		}
		System.puts("\n");
	}
}

// Base class for constraints that have a single output variable.
class UnaryConstraint extends Constraint {
	def myOutput: Variable;
	var satisfied: bool;
	new(myOutput, strength: Strength) : super(strength) {
		addConstraint();
	}
	def isSatisfied() -> bool { return satisfied; }
	def markUnsatisfied() { satisfied = false; }
	def output() -> Variable { return myOutput; }
	def addToGraph() {
		myOutput.addConstraint(this);
		satisfied = false;
	}
	def removeFromGraph() {
		if (myOutput != null) myOutput.removeConstraint(this);
		satisfied = false;
	}
	def chooseMethod(mark: int) {
		satisfied = (myOutput.mark != mark) 
			&& Strengths.stronger(strength, myOutput.walkStrength);
	}
	def markInputs(mark: int) { }
	def inputsKnown(mark: int) -> bool { return true; }
	def recalculate() {
		myOutput.walkStrength = strength;
		myOutput.stay = !isInput();
		if (myOutput.stay) execute();
	}
	def printInputs() { }
}

// Unary input constraint used to mark a variable that the client wishes to change.
class EditConstraint extends UnaryConstraint {
	new(v: Variable, strength: Strength) : super(v, strength) { }
	def isInput() -> bool { return true; }
	def execute() { } // do nothing.
}

// Variables that should, with some level of preference, stay
// the same. Has one def with zero inputs and one output, which
// does nothing. Planners may exploit the fact that, if an equality constraint is
// satisfied, its output will not change during plan execution. This is
// called "stay optimization".
class StayConstraint extends UnaryConstraint {
	new(v: Variable, strength: Strength) : super(v, strength) { }
	def execute() { }
}

// Abstract superclass for constraints having two possible output variables.
class BinaryConstraint extends Constraint {
	def backward: byte = '\xFF';
	def nodirection: byte = '\x00';
	def forward: byte = '\x01';
	def v1: Variable;
	def v2: Variable;
	var direction: byte;

	new(v1, v2, strength: Strength) : super(strength) {
		direction = nodirection;
		addConstraint();
	}
	def isSatisfied() -> bool { return direction != nodirection; }
	def addToGraph() {
		v1.addConstraint(this);
		v2.addConstraint(this);
		direction = nodirection;
	}
	def removeFromGraph() {
		if (v1 != null) v1.removeConstraint(this); // TODO: can v1 be null?
		if (v2 != null) v2.removeConstraint(this); // TODO: can v2 be null?
		direction = nodirection;
	}
	def chooseMethod(mark: int) {
		if (v1.mark == mark) 
			direction = if(v2.mark != mark && Strengths.stronger(strength, v2.walkStrength),
					forward, nodirection);

		if (v2.mark == mark) 
			direction = if(v1.mark != mark && Strengths.stronger(strength, v1.walkStrength),
					backward, nodirection);

		// If we get here, neither variable is marked, so we have a choice.
		if (Strengths.weaker(v1.walkStrength, v2.walkStrength))
			direction = if(Strengths.stronger(strength, v1.walkStrength), backward, nodirection);
		else
			direction = if(Strengths.stronger(strength, v2.walkStrength), forward, nodirection);
	}
	def markUnsatisfied() {
		direction = nodirection;
	}
	def markInputs(mark: int) {
		input().mark = mark;
	}
	def inputsKnown(mark: int) -> bool {
		var i = input();
		return i.mark == mark || i.stay || i.determinedBy == null;
	}
	def output() -> Variable { return if(direction == forward, v2, v1); }
	def input() -> Variable { return if(direction == forward, v1, v2); }
	def recalculate() {
		var in = input(), out = output();
		out.walkStrength = Strengths.weakerOf(strength, in.walkStrength);
		out.stay = in.stay;
		if (out.stay) execute();
	}
	def printInputs() {
		input().print();
	}
}

// Constraints two variables to have the same value.
class EqualityConstraint extends BinaryConstraint {
	new(v1: Variable, v2: Variable, strength: Strength) : super(v1, v2, strength) { }
	def execute() { output().val = input().val; }
}

// Relates two variables by a linear scaling relationship.
class ScaleConstraint extends BinaryConstraint {
	def scale: Variable;
	def offset: Variable;
	new(v1: Variable, scale, offset, v2: Variable, strength: Strength)
		: super(v1, v2, strength) { }
	def addToGraph() {
		v1.addConstraint(this);
		v2.addConstraint(this);
		scale.addConstraint(this);
		offset.addConstraint(this);
	}
	def removeFromGraph() {
		if (v1 != null) v1.removeConstraint(this);
		if (v2 != null) v2.removeConstraint(this);
		scale.removeConstraint(this);
		offset.removeConstraint(this);
	}
	def markInputs(mark: int) {
		input().mark = mark;
		scale.mark = mark;
		offset.mark = mark;
	}
	def execute() {
		if (direction == forward) v2.val = v1.val * scale.val + offset.val;
		else v1.val = (v2.val - offset.val) / scale.val;
	}
	def recalculate() {
		var in = input(), out= output();
		out.walkStrength = Strengths.weakerOf(strength, in.walkStrength);
		out.stay = in.stay && scale.stay && offset.stay;
		if (out.stay) execute(); // stay optimization
	}
}

// A Plan is an ordered list of constraints to be executed in sequence
// to resatisfy all currently satisfiable constraints in the face of
// one or more changing inputs.
class Plan {
	def v: Vector<Constraint> = Vector.new(10);
	def addConstraint(c: Constraint) { v.addElement(c); }
	def execute() {
		var max = v.size();
		for (i = 0; i < max; i++) v.elementAt(i).execute();
	}
}

// The DeltaBlue constraint planner.
class Planner {
	var currentMark: int;

	def newMark() -> int { return ++currentMark; }

	// Attempt to satisfy the given constraint and, if successful,
	// incrementally update the dataflow graph. Details: If satifying
	// the constraint is successful, it may override a weaker constraint
	// on its output. The algorithm attempts to resatisfy that
	// constraint using some other method. This process is repeated
	// until either a) it reaches a variable that was not previously
	// determined by any constraint or b) it reaches a constraint that
	// is too weak to be satisfied using any of its methods. The
	// variables of constraints that have been processed are marked with
	// a unique mark def so that we know where we've been. This allows
	// the algorithm to avoid getting into an infinite loop even if the
	// constraint graph has an inadvertent cycle.
	def incrementalAdd(c: Constraint) {
		var mark = newMark();
		var overridden = c.satisfy(mark);
		while (overridden != null) {
			overridden = overridden.satisfy(mark);
		}
	}

	// Entry point for retracting a constraint. Remove the given
	// constraint and incrementally update the dataflow graph.
	// Details: Retracting the given constraint may allow some currently
	// unsatisfiable downstream constraint to be satisfied. We therefore collect
	// a list of unsatisfied downstream constraints and attempt to
	// satisfy each one in turn. This list is traversed by constraint
	// strength, strongest first, as a heuristic for avoiding
	// unnecessarily adding and then overriding weak constraints.
	// Assume: c is satisfied.
	def incrementalRemove(c: Constraint) {
		var out = c.output();
		c.markUnsatisfied();
		c.removeFromGraph();
		var unsatisfied = removePropagateFrom(out);
		var strength = Strengths.required;
		while(true) {
			for (i = 0; i < unsatisfied.size(); ++i) {
				var u = unsatisfied.elementAt(i);
				if (u.strength == strength) incrementalAdd(u);
			}
			strength = Strengths.nextWeaker(strength);
			if (strength == Strengths.weakest) break;
		}
	}

	// Recompute the walkabout strengths and stay flags of all variables
	// downstream of the given constraint and recompute the actual
	// values of all variables whose stay flag is true. If a cycle is
	// detected, remove the given constraint and answer
	// false. Otherwise, answer true.
	// Details: Cycles are detected when a marked variable is
	// encountered downstream of the given constraint. The sender is
	// assumed to have marked the inputs of the given constraint with
	// the given mark. Thus, encountering a marked node downstream of
	// the output constraint means that there is a path from the
	// constraint's output to one of its inputs.
	def addPropagate(c: Constraint, mark: int) -> bool {
		var todo = Vector<Constraint>.new(10);
		todo.addElement(c);
		while (!todo.isEmpty()) {
			var d = todo.elementAt(0);
			todo.removeElementAt(0);
			if (d.output().mark == mark) {
				incrementalRemove(c);
				return false;
			}
			d.recalculate();
			addConstraintsConsumingTo(d.output(), todo);
		}
		return true;
	}

	// The given variable has changed. Propagate new values downstream.
	def propagateFrom(v: Variable) {
		var todo = Vector<Constraint>.new(10);
		addConstraintsConsumingTo(v, todo);
		while (!todo.isEmpty()) {
			var c = todo.elementAt(0);
			todo.removeElementAt(0);
			c.execute();
			addConstraintsConsumingTo(c.output(), todo);
		}
	}

	// Update the walkabout strengths and stay flags of all variables
	// downstream of the given constraint. Answer a collection of
	// unsatisfied constraints sorted in order of decreasing strength.
	def removePropagateFrom(out: Variable) -> Vector<Constraint> {
		out.determinedBy = null;
		out.walkStrength = Strengths.weakest;
		out.stay = true;
		var unsatisfied = Vector<Constraint>.new(10);
		var todo = Vector<Variable>.new(10);
		todo.addElement(out);
		// XXX: use the vector as a queue
		while (!todo.isEmpty()) {
			var v = todo.elementAt(0);
			todo.removeElementAt(0);
			for (i = 0; i < v.constraints.size(); ++i) {
				var c = v.constraints.elementAt(i);
				if (!c.isSatisfied()) unsatisfied.addElement(c);
			}
			var determiningC = v.determinedBy;
			for (i = 0; i < v.constraints.size(); ++i) {
				var nextC = v.constraints.elementAt(i);
				if (nextC != determiningC && nextC.isSatisfied()) {
					nextC.recalculate();
					todo.addElement(nextC.output());
				}
			}
		}
		return unsatisfied;
	}

	// Extract a plan for resatisfaction starting from the outputs of
	// the given constraints, usually a set of input constraints.
	def extractPlanFromConstraints(constraints: Vector<Constraint>) -> Plan {
		var sources = Vector<Constraint>.new(10);
		for (i = 0; i < constraints.size(); ++i) {
			var c = constraints.elementAt(i);
			if (c.isInput() && c.isSatisfied()) sources.addElement(c);
		}
		return makePlan(sources);
	}

	// Extract a plan for resatisfaction starting from the given source
	// constraints, usually a set of input constraints. This method
	// assumes that stay optimization is desired; the plan will contain
	// only constraints whose output variables are not stay. Constraints
	// that do no computation, such as stay and edit constraints, are
	// not included in the plan.
	// Details: The outputs of a constraint are marked when it is added
	// to the plan under construction. A constraint may be appended to
	// the plan when all its input variables are known. A variable is
	// known if either a) the variable is marked (indicating that has
	// been computed by a constraint appearing earlier in the plan), b)
	// the variable is 'stay' (i.e. it is a constant at plan execution
	// time), or c) the variable is not determined by any
	// constraint. The last provision is for past states of history
	// variables, which are not stay but which are also not computed by
	// any constraint.
	// Assume: sources are all satisfied.
	def makePlan(sources: Vector<Constraint>) -> Plan {
		var mark = newMark();
		var plan = Plan.new();
		var todo = sources;
		// XXX: use the vector like a queue instead of repeating removing the first elem
		while (!todo.isEmpty()) {
			var c = todo.elementAt(0);
			todo.removeElementAt(0);
			if (c.output().mark != mark && c.inputsKnown(mark)) {
				// not in plan already and eligible for inclusion
				plan.addConstraint(c);
				c.output().mark = mark;
				addConstraintsConsumingTo(c.output(), todo);
			}
		}
		return plan;
	}

	def addConstraintsConsumingTo(v: Variable, coll: Vector<Constraint>) {
		var determiningC= v.determinedBy;
		var cc = v.constraints;
		for (i = 0; i < cc.size(); ++i) {
			var c = cc.elementAt(i);
			if (c != determiningC && c.isSatisfied()) coll.addElement(c);
		}
	}
}

// A vector class specifically for this benchmark.
class Vector<T> {
	var array: Array<T>;
	var length: int;
	new(size: int) {
		array = Array.new(size);
	}
	def addElement(e: T) {
		if (length == array.length) grow();
		array(length++) = e;
	}
	def removeElement(e: T) {
		for (i = 0; i < length; i++) {
			if (array(i) == e) return remove(e, i);
		}
	}
	def removeElementAt(i: int) {
		// XXX: this is an O(n) copy operation
		if (i >= length) return;
		for (j = i + 1; j < length; j++) {
			array(j - 1) = array(j);
		}
		length--;
	}
	def elementAt(i: int) -> T {
		return array(i);
	}
	def size() -> int {
		return length;
	}
	private def remove(e: T, i: int) {
		var adjust = 0;
		for (j = i; j < length; j++) {
			while (array(j) == e) {
				adjust++;
				if (++j == length) {
					length = length - adjust;
					return;
				}
			}
			array(i++) = array(j);
		}
		length = length - adjust;
	}
	private def grow() {
		var n = Array<T>.new(array.length * 3 + 1), o = array;
		for (i = 0; i < length; i++) {
			n(i) = o(i);
		}
		array = n;
	}
	def isEmpty() -> bool {
		return length == 0;
	}
}

class Queue<T> {
	var array: Array<T> = Array.new(10);
	var index: int;
	var length: int;
	def add(e: T) {
		if (length == array.length) grow();
		array(index++) = e;
	}
	def remove() -> T {
		if (index < length) return array(index++);
		var v: T;
		return v;
	}
	def empty() -> bool {
		return index < length;
	}
	private def grow() {
		var n = Array<T>.new(array.length * 3 + 1);
		var o = array;
		// only copy the unconsumed items
		for (i = index; i < length; i++) n(i) = o(i);
		array = n;
	}
}
