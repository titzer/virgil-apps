// Copyright (C) 2013. Google Inc.

// This benchmark is based on a Java version of the Sudoku solver benchmark.
// Available from https://github.com/attractivechaos/plb/tree/master/sudoku

var R: Array<Array<int>>;
var C: Array<Array<int>>;

def matrix(r: int, c: int) -> Array<Array<int>> {
	var result = Array<Array<int>>.new(r);
	for (i < result.length) {
		result[i] = Array<int>.new(c);
	}
	return result;
}
def genmat() {
	R = matrix(324, 9);
	C = matrix(729, 4);
	var nr = Array<int>.new(324);
	var r = 0;
	for (i < 9) // generate c(729)(4)
		for (j < 9)
			for (k < 9) { // this "9" means each cell has 9 possible numbers
				C[r][0] = 9 * i + j;                  // row-column constraint
				C[r][1] = (i / 3 * 3 + j / 3) * 9 + k + 81; // box-number constraint
				C[r][2] = 9 * i + k + 162;            // row-number constraint
				C[r][3] = 9 * j + k + 243;            // col-number constraint
				++r;
			}
	for (c < 324) nr[c] = 0;
	for (r < 729) // generate r()() from c()()
		for (c2 < 4) {
			var k = C[r][c2];
			R[k][nr[k]++] = r;
		}
}
def sd_update(sr: Array<int>, sc: Array<int>, r: int, v: int) -> int {
	var min = 10, min_c = 0;
	for (c2 < 4) {
		var index = C[r][c2];
		sc[index] = sc[index] + (v << 7);
	}
	for (c2 < 4) { // update # available choices
		var rr: int, c = C[r][c2];
		if (v > 0) { // move forward
			for (r2 < 9) {
				if (sr[rr = R[c][r2]]++ != 0) continue; // update the row status
				for (cc2 < 4) {
					var cc = C[rr][cc2];
					if (--sc[cc] < min) { // update # allowed choices
						min = sc[cc];
						min_c = cc; // register the minimum number
					}
				}
			}
		} else { // revert
			for (r2 < 9) {
				if (--sr[rr = R[c][r2]] != 0) continue; // update the row status
				var p = C[rr];
				++sc[p[0]];
				++sc[p[1]];
				++sc[p[2]];
				++sc[p[3]]; // update the count array
			}
		}
	}
	return min << 16 | min_c; // return the col that has been modified and with the minimal available choices
}
// solve a Sudoku; str is the standard dot/number representation
def solve(str: string) -> int {
	var n = 0, hints = 0;
	def sr = Array<int>.new(729);
	def cr = Array<int>.new(81);
	def sc = Array<int>.new(324);
	def cc = Array<int>.new(81);
	def out = Array<int>.new(81);

	for (r < 729) sr[r] = 0; // no row is forbidden
	for (c < 324) sc[c] = 0 << 7 | 9; // 9 allowed choices; no constraint has been used
	for (i < 81) {
		var ch = str[i];
		var a = if(ch >= '1' && ch <= '9', ch - '1', -1); // number from -1 to 8
		if (a >= 0) sd_update(sr, sc, i * 9 + a, 1); // set the choice
		if (a >= 0) ++hints; // count the number of hints
		cr[i] = cc[i] = -1;
		out[i] = a;
	}

	var i = 0, c = 0, r = 0;
	var dir = 1; // dir=1: forward; dir=-1: backtrack
	var cand = 10 << 16|0, min = 0;

	while (true) {
		while (i >= 0 && i < 81 - hints) { // maximum 81-hints steps
			if (dir == 1) {
				min = cand >>> 16;
				cc[i] = cand & 0xffff;
				if (min > 1) {
					for (c < 324) {
						if (sc[c] < min) {
							min = sc[c]; cc[i] = c; // choose the top constraint
							if (min <= 1) break; // this is for acceleration; slower without this line
						}
					}
				}
				if (min == 0 || min == 10) cr[i--] = dir = -1; // backtrack
			}
			c = cc[i];

			if (dir == -1 && cr[i] >= 0) sd_update(sr, sc, R[c][cr[i]], -1); // revert the choice
			var r2 = 9;
			for (j = cr[i] + 1; j < 9; ++j) { // search for the choice to make
				if (sr[R[c][j]] == 0) {
					r2 = j;
					break; // found if the state equals 0
				}
			}
			if (r2 < 9) {
				cand = sd_update(sr, sc, R[c][r2], 1); // set the choice
				cr[i++] = r2;
				dir = 1; // moving forward
			} else {
				cr[i--] = dir = -1; // backtrack
			}
		}
		if (i < 0) break;

		var y = Array<byte>.new(81);
		for (j < 81) y[j] = byte.!(out[j] + '1');
		for (j < i) {
			r = R[cc[j]][cr[j]];
			y[r / 9] = byte.!(r % 9 + '1');
		}
		System.puts(y);
		System.ln();
		++n;
		--i;
		dir = -1; // backtrack
	}
	return n;
}
def line(input: Array<byte>, start: int, end: int) -> Array<byte> {
	var result = Array<byte>.new(end - start);
	for (i < result.length) {
		result[i] = input[start + i];
	}
	return result;
}
def main(args: Array<string>) -> int {
	if (args.length == 0) {
		System.puts("Usage: Sudoku <input file>\n");
		return 1;
	}
	genmat();
	var input = System.fileLoad(args[0]);
	if (input == null) {
		System.puts("Could not load: ");
		System.puts(args[0]);
		System.ln();
		return 1;
	}
	var last = 0;
	for (i < input.length) {
		if (input[i] == '\n') {
			if (i - last >= 81) {
				solve(line(input, last, i));
				System.ln();
			}
			last = i + 1;
		}
	}
	return 0;
}
