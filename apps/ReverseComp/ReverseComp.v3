// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// DNA reverse complement program from the programming language shootout.
component ReverseComp {
	def map = Array<byte>.new(128);

	new() {
		for (i < map.length) map[i] = byte.!(i);

		map['t'] = map['T'] = 'A';
		map['a'] = map['A'] = 'T';
		map['g'] = map['G'] = 'C';
		map['c'] = map['C'] = 'G';
		map['v'] = map['V'] = 'B';
		map['h'] = map['H'] = 'D';
		map['r'] = map['R'] = 'Y';
		map['m'] = map['M'] = 'K';
		map['y'] = map['Y'] = 'R';
		map['k'] = map['K'] = 'M';
		map['b'] = map['B'] = 'V';
		map['d'] = map['D'] = 'H';
		map['u'] = map['U'] = 'A';
	}

	def main(args: Array<Array<byte>>) -> int {
		if (args.length < 1) {
			System.puts("Error: no file specified.\n");
			return -1;
		}
		var data = System.fileLoad(args[0]);
		if (data == null) {
			System.puts("Error: input file not found.\n");
			return -1;
		}		

		var i = 0;
		while (i < data.length) {
			var start = i, end = i;
			while (true) {
				if (end == data.length) {
					i = end;
					break;
				}
				if (data[end] == '>') {
					var j = end;
					while (j < data.length && data[j] != '\n') j++;
					i = j + 1;
					break;
				}
				end++;
			}
			while (start < end) {
				end = end - 1;
				if (data[end] == '\n') end = end - 1;
				if (start < end) {
					var tmp = map[data[start]];
					data[start] = map[data[end]];
					data[end] = tmp;
					start++;
					if (data[start] == '\n') start++;
				}
			}
		}

		System.puts(data);
		return 0;
	}
}
