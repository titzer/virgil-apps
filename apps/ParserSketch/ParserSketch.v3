// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component ParserSketch {
	def isIdent = initIdentBytes();

	var comments: List<Item>;
	var classes: List<Item>;
	var methods: List<Item>;
	var fields: List<Item>;

	def main(args: Array<string>) -> int {
		if (args.length < 2) {
			System.puts("usage: <count> <file>");
			return 1;
		}
		var failures = 0, count = Int.parse(args[0]);
		for (i < count) {
			System.puts("Loading ");
			System.puts(args[1]);
			System.puts("...");
			var data = System.fileLoad(args[1]);
			if (data != null) {
				System.puti(data.length);
				System.puts(" bytes\n");
				parseData(data);
				report();
			} else {
				System.puts("fail\n");
				failures = failures + 1;
			}
		}
		printItems("Comment", comments);
		printItems("Compound", classes);
		printItems("Method", methods);
		printItems("Field", fields);
		return failures;
	}
	def report() {
		reportLength("comments", comments);
		reportLength("classes", classes);
		reportLength("fields", fields);
		reportLength("methods", methods);
		comments = null;
		classes = null;
		methods = null;
		fields = null;
		System.ln();
	}
	def reportLength(what: string, l: List<Item>) {
		System.puti(length(l));
		System.puts(" ");
		System.puts(what);
		System.puts(", ");
	}
	def length<T>(list: List<T>) -> int {
		var i = 0;
		for (l = list; l != null; l = l.tail) i++;
		return i;
	}
	def printItems(name: string, list: List<Item>) {
		while (list != null) {
			System.puts("===== ");
			System.puts(name);
			System.puts(" @ ");
			System.puti(list.head.start);
			System.puts(" - ");
			System.puti(list.head.end);
			System.puts(" =====");
			System.ln();
			list = list.tail;
		}
	}
	def initIdentBytes() -> Array<bool> {
		var a = Array<bool>.new(128);
		for (i < 128) {
			if (i == '_' 
				|| (i >= 'a' && i <= 'z')
				|| (i >= 'A' && i <= 'Z')
				|| (i >= '0' && i <= '9')) a[i] = true;
		}
		return a;
	}
	def parseData(data: Array<byte>) {
		var pos = 0;
		while (pos < data.length) {
			var ch = data[pos];
			if (ch == '/') pos = checkComment(data, pos);
			else if (ch == 'c' && 
				   (checkKeyword(data, pos, "class") 
				|| checkKeyword(data, pos, "component"))) {
				pos = parseCompound(data, pos);
			}
			pos = pos + 1;
		}
	}
	def checkKeyword(data: Array<byte>, pos: int, kw: string) -> bool {
		if (pos + kw.length >= data.length) return false;
		for (i < kw.length) {
			if (data[pos + i] != kw[i]) return false;
		}
		return true;
	}
	def parseCompound(data: Array<byte>, pos: int) -> int {
		var start = pos;
		while (pos < data.length) {
			var ch = data[pos];
			match (ch) {
				'/' => pos = checkComment(data, pos);
				'f' => if (checkKeyword(data, pos, "field")) {
					pos = parseField(data, pos);
				} 
				'v' => if (checkKeyword(data, pos, "value")) {
					pos = parseField(data, pos);
				} 
				'n' => if (checkKeyword(data, pos, "new")) {
					pos = parseMethod(data, pos);
				}
				'm' => if (checkKeyword(data, pos, "method")) {
					pos = parseMethod(data, pos);
				}
				'}' => break; // TODO: match curlies
			}
			pos = pos + 1;
		}
		classes = cons(Item.new(start, pos), classes);
		return pos;
	}
	def parseField(data: Array<byte>, pos: int) -> int {
		var start = pos;
		while (pos < data.length) {
			var ch = data[pos];
			if (ch == ';') break; // end of var declaration
			if (ch == '/') { // could be a line comment
				pos = checkComment(data, pos);
			}
			pos = pos + 1;
		}
		fields = cons(Item.new(start, pos), fields);
		return pos - 1;
	}
	def parseMethod(data: Array<byte>, pos: int) -> int {
		var start = pos;
		while (pos < data.length) {
			var ch = data[pos];
			if (ch == ';') break; // def with no body
			if (ch == '{') { // beginning of body
				pos = parseBalancedCurlies(data, pos + 1);
				break;
			} else if (ch == '/') { // could be a line comment
				pos = checkComment(data, pos);
			}
			pos = pos + 1;
		}
		methods = cons(Item.new(start, pos), methods);
		return pos - 1;
	}
	def parseBalancedCurlies(data: Array<byte>, pos: int) -> int {
		var count = 1;
		while (pos < data.length) {
			var ch = data[pos];
			if (ch == '{') {
				count = count + 1;
			} else if (ch == '}') {
				count = count - 1;
				if (count == 0) return pos;
			} else if (ch == '/') {
				pos = checkComment(data, pos);
			}
			pos = pos + 1;
		}
		return pos;
	}
	def checkComment(data: Array<byte>, pos: int) -> int {
		if (pos < data.length - 1 && data[pos] == '/') {
			// parse a line comment
			var start = pos;
			pos = pos + 2;
			while (pos < data.length) {
				if (data[pos] == '\n') break;
				pos = pos + 1;
			}
			comments = cons(Item.new(start, pos - 1), comments);
			return pos - 1;
		}
		return pos;
	}
	def cons<T>(head: T, tail: List<T>) -> List<T> {
		return List<T>.new(head, tail);
	}
}

class List<T> {
	def head: T;
	def tail: List<T>;
	new(head, tail) { }
}

class Item {
	def start: int;
	def end: int;
	new(start, end) { }
}
