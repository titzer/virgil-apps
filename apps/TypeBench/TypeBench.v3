// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component TypeBench {
	def times = false;
	var count: int;
	def main(args: Array<string>) {
		def max = if (args.length > 0, Int.parse(args[0]), 10);
		count = if(args.length > 1, Int.parse(args[1]), 100000);
		for (i < max) run();
	}
	def run() {
		var before = System.ticksUs();
		for (i < count) {
			var a = TypeUtil.newType(GlobalType.ARRAY_1, List.new(GlobalType.VOID_TYPE1, null));
			var b = TypeUtil.newType(GlobalType.ARRAY_1, List.new(GlobalType.BOOL_TYPE1, null));
			var c = TypeUtil.newType(GlobalType.ARRAY_1, List.new(GlobalType.BYTE_TYPE1, null));
			var x = TypeUtil.newType(GlobalType.ARRAY_1, List.new(a, null));
			var y = TypeUtil.newType(GlobalType.ARRAY_1, List.new(b, null));
			var z = TypeUtil.newType(GlobalType.ARRAY_1, List.new(c, null));
		}
		if (times) System.puti(System.ticksUs() - before);
		else System.puti(GlobalType.ARRAY_1.cacheCount());
		System.puts(" ");

		before = System.ticksUs();
		for (i < count) {
			var a = GlobalType.ARRAY_2.create1(GlobalType.VOID_TYPE2);
			var b = GlobalType.ARRAY_2.create1(GlobalType.BOOL_TYPE2);
			var c = GlobalType.ARRAY_2.create1(GlobalType.BYTE_TYPE2);
			var x = GlobalType.ARRAY_2.create1(a);
			var y = GlobalType.ARRAY_2.create1(b);
			var z = GlobalType.ARRAY_2.create1(c);
		}
		if (times) System.puti(System.ticksUs() - before);
		else System.puti(GlobalType.ARRAY_2.cacheCount());
		System.puts(" ");

		var tc1: TypeCon;
		before = System.ticksUs();
		for (i < count) {
			if ((i % 100) == 0) tc1 = Basic_TypeCon.new("Blarf", 1, GlobalType.KIND_CLASS);
			var a = TypeUtil.newType(tc1, List.new(GlobalType.VOID_TYPE1, null));
			var b = TypeUtil.newType(tc1, List.new(GlobalType.BOOL_TYPE1, null));
			var c = TypeUtil.newType(tc1, List.new(GlobalType.BYTE_TYPE1, null));
			var x = TypeUtil.newType(GlobalType.ARRAY_1, List.new(a, null));
			var y = TypeUtil.newType(GlobalType.ARRAY_1, List.new(b, null));
			var z = TypeUtil.newType(GlobalType.ARRAY_1, List.new(c, null));
		}
		if (times) System.puti(System.ticksUs() - before);
		else System.puti(tc1.cacheCount());
		System.puts(" ");

		before = System.ticksUs();
		var tc2: TypeCache2;
		var tc: TypeCon2;
		for (i < count) {
			if ((i % 1000) == 0) tc2 = TypeCache2.new();
			if ((i % 100) == 0) tc = TypeCon2.new(GlobalType.KIND_CLASS, tc2);
			var a = tc.create1(GlobalType.VOID_TYPE2);
			var b = tc.create1(GlobalType.BOOL_TYPE2);
			var c = tc.create1(GlobalType.BYTE_TYPE2);
			var x = GlobalType.ARRAY_2.create1(a);
			var y = GlobalType.ARRAY_2.create1(b);
			var z = GlobalType.ARRAY_2.create1(c);
		}
		if (times) System.puti(System.ticksUs() - before);
		else System.puti(tc.cacheCount());
		System.ln();
	}
}
component GlobalType {
	def KIND_VOID  = 0;
	def KIND_BOOL  = 1;
	def KIND_BYTE  = 2;
	def KIND_INT   = 3;
	def KIND_TUPLE = 4;
	def KIND_ARRAY = 5;
	def KIND_CLASS = 6;

	def typeCache2 = TypeCache2.new();

	def VOID_TYPE1 = TypeUtil.singleType ("void", KIND_VOID);
	def VOID_TYPE2 = TypeUtil.singleType2("void", KIND_VOID);
	def BOOL_TYPE1 = TypeUtil.singleType ("bool", KIND_BOOL);
	def BOOL_TYPE2 = TypeUtil.singleType2("bool", KIND_BOOL);
	def BYTE_TYPE1 = TypeUtil.singleType ("byte", KIND_BYTE);
	def BYTE_TYPE2 = TypeUtil.singleType2("byte", KIND_BYTE);
	def INT_TYPE1  = TypeUtil.singleType ("int", KIND_INT);
	def INT_TYPE2  = TypeUtil.singleType2("int", KIND_INT);

	def ARRAY_1 = Basic_TypeCon.new("Array", KIND_ARRAY, 1);
	def ARRAY_2 = TypeCon2.new(KIND_ARRAY, typeCache2);
}
// A basic immutable list utility class
class List<T> {
	def head: T;
	def tail: List<T>;
	new(head, tail) { }
}
// Common operations on lists
component Lists {
	def reverse<T>(rev: List<T>) -> List<T> {
		var list: List<T> = null;
		while (rev != null) {
			list = List.new(rev.head, list);
			rev = rev.tail; 
		}
		return list;
	}
}
// generates sequential, globally unique IDs
component UID {
	var next: int;
}
// (old) representation of a type
class Type {
	def hash: int = UID.next++;
	def nested: List<Type>;
	def open: bool;
	def typeCon: TypeCon;
	
	new(open, nested, typeCon) { }
}
// A type constructor creates types from nested types.
class TypeCon {
	def kind: int;
	def arity: int;
	new(kind, arity) { }
	def create(open: bool, typeParams: List<Type>) -> Type;
	def cacheCount() -> int;
}
// A type constructor that only constructs a single type.
class Single_TypeCon extends TypeCon {
	def name: string;
	var singleType: Type;
	new(name, kind: int) : super(kind, 0) { singleType = Type.new(false, null, this); }
	def create(open: bool, typeParams: List<Type>) -> Type { return singleType; }
}
// A type constructor that accepts any number of nested types.
class Basic_TypeCon extends TypeCon {
	def name: string;
	def cache: TypeCache = TypeCache.new();

	new(name, kind: int, arity: int) : super(kind, arity) { }
	def create(open: bool, types: List<Type>) -> Type {
		return cache.get(open, this, types);
	}
	def cacheCount() -> int { return cache.count(); }
}
// A cache which uniquifies types, so that K<T> == K<T> iff T == T
class TypeCache {
	var singleton: Type;
	var oneCache: HashMap<Type, Type>;
	var listCache: HashMap<List<Type>, Type>;
	def get(open: bool, typeCon: TypeCon, types: List<Type>) -> Type {
		if (types == null) {
			// a zero-arity create
			if (singleton == null) singleton = Type.new(open, null, typeCon);
			return singleton;
		}
		if (types.tail == null) {
			// a one-arity create
			if (oneCache == null) oneCache = TypeUtil.newTypeMap();
			var ctype = oneCache.get(types.head);
			if (ctype == null) {
				ctype = Type.new(open, types, typeCon);
				oneCache.set(types.head, ctype);
			}
			return ctype;
		}
		// a multi-arity create
		if (listCache == null) listCache = TypeUtil.newTypeListMap();
		var ctype = listCache.get(types);
		if (ctype == null) {
			ctype = Type.new(open, types, typeCon);
			listCache.set(types, ctype);
		}
		return ctype;
	}
	def count() -> int {
		return if(oneCache != null, oneCache.count())
			+ if(listCache != null, listCache.count());
	}
}
// Internal data structure needed by HashMap to represent chained buckets.
class Bucket<K, V> {
	def key: K;
	var val: V;
	var next: Bucket<K, V>;

	new(key, val: V, next: Bucket<K,V>) {
		this.next = next;
		this.val = val;
	}
}
// A general-purpose HashMap implementation that provides the PartialMap interface.
// For maximum reusability, this implementation accepts the hash and equality functions
// as delegates, and thus can map any key type to any def type.
class HashMap<K, V> {
	def hash: K -> int;			// user-supplied hash function
	def equals: (K, K) -> bool;		// user-supplied equality method
	var table: Array<Bucket<K, V>>;	// lazily allocated hashtable
	var cache: Bucket<K, V>;		// cache for last entry get/set

	new(hash, equals) { }
	def get(key: K) -> V {
		var c = cache;
		if (c == null) { var none: V; return none; }
		// cache is valid, must be at least one entry
		if (c.key == key) return c.val;
		// if table is null, there is only one key/def pair
		if (table == null) {
			if (equals(c.key, key)) return c.val; // a slow hit in the cache
			var none: V; 
			return none;
		}
// XXX: tune compiler to avoid need for hand-inlining HashMap.getTable()
//		return getTable(key);
//	}
//	private def getTable(key: K) -> V {
		// cache did not match, hash and do bucket search
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) {
				cache = bucket;
				return bucket.val;
			}
		}
		var none: V;
		return none;
	}
	def set(key: K, val: V) {
		var c = cache;
		if (c == null) {
			// no entries yet, simply add it as the cache
			cache = Bucket<K, V>.new(key, val, null);
			return;
		}
		if (c.key == key) {
			// ==, a fast hit in the cache
			c.val = val;
			return;
		}
		if (table == null) {
			if (equals(c.key, key)) {
				// equals(), a slow hit in the cache
				c.val = val;
				return;
			}
			// missed the cache, table not yet allocated, insert both
			table = Array.new(11); // TUNABLE: initial HashMap table size
			insert(c);
			insert(cache = Bucket.new(key, val, null));
			return;
		}
// XXX: tune compiler to avoid need for hand-inlining HashMap.setTable()
//		return setTable(key, val);
//	}
//	private def setTable(key: K, val: V) {
		// missed the cache, hash and search the table
		var hashval = dohash(key);
		var i = 0;
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				cache = bucket;
				return;
			}
			i++;
		}
		// insert into table and cache
		table[hashval] = cache = Bucket.new(key, val, table[hashval]);
		if (i > 4 && table.length < 1001) balance();
	}
	def has(key: K) -> bool {
		var c = cache;
		if (c == null) return false; // no entries
		if (c.key == key) return true; // hit cache
		if (table == null) return equals(c.key, key); // no table, slow hit cache?
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) return true;
		}
		return false;
	}
	def apply(func: (K, V) -> void) {
		if (table == null) {
			// zero or one entry
			if (cache != null) func(cache.key, cache.val);
			return;
		}
		// two or more entries
		for (b in table) {
			for (bucket = b; bucket != null; bucket = bucket.next) {
				func(bucket.key, bucket.val);
			}
		}
	}
	private def insert(bucket: Bucket<K, V>) {
		var hashval = dohash(bucket.key);
		bucket.next = table[hashval];
		table[hashval] = bucket;
	}
	private def dohash(key: K) -> int {
		return int.!(2147483647 & hash(key)) % table.length;
	}
	private def balance() {
		var old = table;
		var nlen = table.length * 3 + 1;
		table = Array.new(nlen);
		for (i < old.length) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = Bucket.new(b.key, b.val, table[hashval]);
			}
		}
	}
	def count() -> int {
		var cnt = 0;
		for (bucket in table) {
			for (b = bucket; b != null; b = b.next) cnt++;
		}
		return cnt;
	}
}
// Utility methods for types.
component TypeUtil {
	def TYPE_PARAM_KIND: int = 9;
	def TYPE_VAR_KIND: int = 10;
	def NO_TYPES: Array<Type> = [];

	def aliasTypeCon(name: string, t: Type) -> TypeCon {
		var typeCon = Single_TypeCon.new(name, t.typeCon.kind);
		typeCon.singleType = t;
		return typeCon;
	}
	def singleType(name: string, kind: int) -> Type {
		return Single_TypeCon.new(name, kind).singleType;
	}
	def singleType2(name: string, kind: int) -> Type2 {
		var typeCon = TypeCon2.new(kind, GlobalType.typeCache2);
		return typeCon.create0();
	}
	def newTypeMap<T>() -> HashMap<Type, T> {
		return HashMap.new(Type.hash, Type.==);
	}
	def newTypeListMap<T>() -> HashMap<List<Type>, T> {
		return HashMap.new(hashList, equalsList);
	}
	def newTypePairMap<T>() -> HashMap<(Type, Type), T> {
		return HashMap.new(typePairHash, typePairEqual);
	}
	def hashList(list: List<Type>) -> int {
		var hash = 0;
		while (list != null) {
			hash = hash * 33 + list.head.hash;
			list = list.tail;
		}
		return hash;
	}
	def equalsList(l1: List<Type>, l2: List<Type>) -> bool {
		if (l1 == l2) return true;
		while (l1 != null) {
			if (l2 == null || l1.head != l2.head) return false;
			l1 = l1.tail;
			l2 = l2.tail;
		}
		return l2 == null;
	}
	def equalsList2(l1: List<Type2>, l2: List<Type2>) -> bool {
		if (l1 == l2) return true;
		while (l1 != null) {
			if (l2 == null || l1.head != l2.head) return false;
			l1 = l1.tail;
			l2 = l2.tail;
		}
		return l2 == null;
	}
	def typePairHash(a: Type, b: Type) -> int {
		return a.hash + b.hash;
	}
	def typePairEqual(a: (Type, Type), b: (Type, Type)) -> bool {
		return a == b;
	}
	def newType(typeCon: TypeCon, nested: List<Type>) -> Type {
		// check if there are any non-closed nested types
		for (list = nested; list != null; list = list.tail) {
			if (list.head.open) typeCon.create(true, nested);
		}
		// no non-closed subformulas
		return typeCon.create(false, nested);
	}
}
// Representation of a type. No subclasses.
class Type2 {
	def hash: int;		// probabilistically unique id and openness
	def typeCon: TypeCon2;		// type constructor
	def nested: List<Type2>;	// nested types, if any
	var link: Type2;		// used as a link in the hash bucket chain

	new(hash, typeCon, nested) { }
	def isOpen() -> bool {
		return (hash & 0xC0000000) != 0;
	}
	def hasTypeVars() -> bool {
		return (hash & 0x80000000) != 0;
	}
	def hasTypeParams() -> bool {
		return (hash & 0x40000000) != 0;
	}
}
// Enforces reference equality for types using a customized hashing representation.
// Makes use of the "link" var of a type, using the type itself as the hash bucket.
// A type is created by only one type constructor and cached in only one typecache.
class TypeCache2 {
	def uid = UID.next++;
	var singleBuckets = Array<Type2>.new(11);
	var multiBuckets  = Array<Type2>.new(13);

	def get1(hash: int, typeCon: TypeCon2, t: Type2) -> Type2 {
		var index = hash % singleBuckets.length;
		var bucket = singleBuckets[index], chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			// specialized search for a single nested type
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (b.nested.head == t) return b;
		}
		// not found, create and insert.
		var n = Type2.new(hash, typeCon, List.new(t, null));
		n.link = bucket;
		singleBuckets[index] = n;
		if (chain > 5) singleBuckets = rebalance(singleBuckets);
		return n;
	}
	def getN(hash: int, typeCon: TypeCon2, nested: List<Type2>) -> Type2 {
		var index = hash % multiBuckets.length;
		var bucket = multiBuckets[index], chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (TypeUtil.equalsList2(nested, b.nested)) return b;
		}
		// not found, create and insert.
		var n = Type2.new(hash, typeCon, nested);
		n.link = bucket;
		multiBuckets[index] = n;
		if (chain > 5) multiBuckets = rebalance(multiBuckets);
		return n;
	}
	private def rebalance(buckets: Array<Type2>) -> Array<Type2> {
		if (buckets.length > 10000) return buckets; // enforce maximum size
		var newsize = 7 * buckets.length + 112; // grow fast (11 -> 189 -> 1435 -> 10157)
		var newbuckets = Array<Type2>.new(newsize);
		for (b in buckets) {
			if (b == null) continue;
			var p = b.link;
			for (o = b; o != null; o = p) {
				p = o.link;
				var index = (o.hash & 0x7FFFFFFF) % newsize;
				o.link = newbuckets[index];
				newbuckets[index] = o;
			}
		}
		return newbuckets;
	}
	def count() -> int {
		var cnt = 0;
		for (bucket in singleBuckets) {
			for (b = bucket; b != null; b = b.link) cnt++;
		}
		for (bucket in multiBuckets) {
			for (b = bucket; b != null; b = b.link) cnt++;
		}
		return cnt;
	}
}
// Constructs all types, using a type cache for enforcing reference equality.
// Either uses this typecache or the typecache with the largest UID of any of the
// nested types. E.g. Array<T> will be cached in either Array's typecache or T's
// typecache, depending on which has the higher ID.
class TypeCon2 {
	def uid  = UID.next++;	// unique id for type constructor
	def kind: int;		// kind of the type constructor
	def typeCache: TypeCache2;	// per-language or per-program type cache
	def open: int;		// openness
	var singleton: Type2;		// type with 0 nested types

	new(kind, typeCache) { }
	def create(nested: List<Type2>) -> Type2 {
		if (nested == null) return create0();
		if (nested.tail == null) return create1(nested.head);
		var cache = typeCache, hash = uid;
		for (l = nested; l != null; l = l.tail) {
			var t = l.head, tc = t.typeCon.typeCache;
			if (tc.uid > cache.uid) cache = tc;
			hash = (0x1FFFFFFF & (t.hash + hash * 33)) | (0x60000000 & (t.hash | hash));
		}
		return cache.getN(hash, this, nested);
	}
	def create0() -> Type2 {
		if (singleton == null) singleton = Type2.new(uid | open, this, null);
		return singleton;
	}
	def create1(t: Type2) -> Type2 {
		var cache = typeCache, tc = t.typeCon.typeCache;
		if (tc.uid > cache.uid) cache = tc;
		var hash = (0x3FFFFFFF & (t.hash + uid * 33)) | (0xC0000000 & t.hash);
		return cache.get1(hash, this, t);
	}
	def cacheCount() -> int {
		return typeCache.count();
	}
}
// Implements special rules for constructing 1-arg tuple types.
class Tuple_TypeCon2 extends TypeCon2 {
	new(typeCache: TypeCache2) : super(GlobalType.KIND_TUPLE, typeCache) {
		singleton = GlobalType.VOID_TYPE2;
	}
	def create1(t: Type2) -> Type2 {
		return t;
	}
}
