// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Virgil III implementation of the "binarytrees" application
// from the Programming Language Shootout
component BinaryTrees {
	def minDepth = 4;

	def main(args: Array<string>) -> int {
		var n = Util.intArg(args, 0);
		var maxDepth = n;
		if (minDepth + 2 > n) maxDepth = minDepth + 2;
		var stretchDepth = maxDepth + 1;

		var check = bottomUpTree(0,stretchDepth).itemCheck();
		print2("stretch tree of depth %1\t check: %2\n", stretchDepth, check);

		var longLivedTree = bottomUpTree(0, maxDepth);
		for (depth = minDepth; depth <= maxDepth; depth = depth + 2) {
			var iterations = shift(1, (maxDepth - depth + minDepth));
			check = 0;
			for (i = 1; i <= iterations; i++) {
				check = check + bottomUpTree(i, depth).itemCheck();
				check = check + bottomUpTree(0 - i, depth).itemCheck();
			}
			print3("%1\t trees of depth %2\t check: %3\n", iterations * 2, depth, check);
		}
		print2("long lived tree of depth %1\t check: %2\n", maxDepth, longLivedTree.itemCheck());
		return 0;
	}
	def shift(val: int, shift: int) -> int {
		if (shift < 32) { 
			while (shift > 0) {
				val = val * 2;
				shift--;
			}
		}
		return val;
	}
	def print2(format: string, a: int, b: int) {
		var i = 0;
		while (i < format.length) {
			var ch = format[i];
			if (ch == '%') {
				if (format[i + 1] == '1') { System.puti(a); i = i + 1; }
				else if (format[i + 1] == '2') { System.puti(b); i = i + 1; }
				else System.putc(ch);
			} else {
				System.putc(ch);
			}
			i = i + 1;
		}
	}
	def print3(format: string, a: int, b: int, c: int) {
		var i = 0;
		while (i < format.length) {
			var ch = format[i];
			if (ch == '%') {
				if (format[i + 1] == '1') { System.puti(a); i = i + 1; }
				else if (format[i + 1] == '2') { System.puti(b); i = i + 1; }
				else if (format[i + 1] == '3') { System.puti(c); i = i + 1; }
				else System.putc(ch);
			} else {
				System.putc(ch);
			}
			i = i + 1;
		}
	}
	def bottomUpTree(item: int, depth: int) -> TreeNode {
		if (depth > 0) {
			return TreeNode.new(bottomUpTree(2*item-1, depth-1), bottomUpTree(2*item, depth-1), item);
		} else {
			return TreeNode.new(null, null, item);
		}
	}
}

class TreeNode {
	def left: TreeNode;
	def right: TreeNode;
	def item: int;

	new(left, right, item) { }

	def itemCheck() -> int {
		if (left == null) return item;
		else return item + left.itemCheck() - right.itemCheck();
	}
}
