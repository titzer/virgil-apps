// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component TreeSeq {
	var initial = 40;

	def main(arg: Array<string>) {
		if (arg.length < 2) {
			System.error("UsageError", "required <iter> <count>");
		}
		var iter = Int.parse(arg[0]);
		var count = Int.parse(arg[1]);

		for (j < iter) {
			{
				var seq1 = TreeSequence<int>.new(initial);
				for (i < count) seq1.add(i);
				seq1.copy();
				seq1.apply(empty);
			}
			{
				var seq2 = Sequence<int>.new();
				for (i < count) seq2.add(i);
				seq2.copy();
				seq2.apply(empty);
			}
			System.putc('.');
		}
		System.ln();
	}
	def empty(i: int) {
	}
	def copy<T>(src: Array<T>, dst: Array<T>) -> Array<T>{
		var max = src.length;
		if (dst == null) {
			dst = Array<T>.new(max);
		} else if (max > dst.length) {
			max = dst.length;
		}
		for (i < max) dst[i] = src[i];
		return dst;
	}
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			return copy(array, Array<T>.new(size));
		}
		return array;
	}
}

class TreeNode<T> {
	var parent: TreeNode<T>;
	var left: TreeNode<T>;
	var right: TreeNode<T>;
	var start: int;
	new(left, start) { }
	def find(val: int) -> LeafNode<T> {
		if (right == null || val < right.start) {
			return left.find(val);
		} else {
			return right.find(val);
		}
	}
}

class LeafNode<T> extends TreeNode<T> {
	var data: Array<T>;
	var next: LeafNode<T>;
	new(start: int, size: int) : super(null, start) {
		data = Array<T>.new(size);
	}
	def find(val: int) -> LeafNode<T> {
		return this;
	}
}

class TreeSequence<T> {
	var fragmentSize: int;
	var root: TreeNode<T>;
	var first: LeafNode<T>;
	var current: LeafNode<T>;
	var size: int;
	var cursor: int;

	new(fragmentSize) {
		this.fragmentSize = fragmentSize;
	}
	def add(val: T) {
		if (current == null) addLeaf();
		current.data[cursor] = val;
		cursor = cursor + 1;
		size = size + 1;
		if (cursor >= current.data.length) {
			addLeaf();
			cursor = 0;
		}
	}
	def get(pos: int) -> T {
		var leaf = root.find(pos);
		return leaf.data[pos - leaf.start];
	}
	def set(pos: int, val: T) {
		var leaf = root.find(pos);
		leaf.data[pos - leaf.start] = val;
	}
	def addLeaf() {
		fragmentSize = fragmentSize + 5;
		var nf = LeafNode<T>.new(size, fragmentSize);
		if (current != null) {
			current.next = nf;
			addNode(nf, current.parent);
		} else {
			first = nf;
			addNode(nf, null);
		}
		current = nf;
	}
	def addNode(tn: TreeNode<T>, parent: TreeNode<T>) -> TreeNode<T> {
		if (parent == null) {
			// no parent exists, create oldest ancestor
			var np = TreeNode<T>.new(tn, tn.start);
			root = np;
			tn.parent = np;
			return np;
		}
		if (parent.right == null) {
			// there is free space in this parent
			parent.right = tn;
			tn.parent = parent;
			return parent;
		} else {
			// both full, recursively create uncle
			var uncle = TreeNode<T>.new(tn, tn.start);
			uncle.parent = addNode(uncle, parent.parent);
			return uncle;
		}
	}
	def copy() -> Array<T> {
		var array = Array<T>.new(size);
		if (first != null) {
			var leaf = first;
			while (leaf.next != null) {
				var d = leaf.data;
				var i = leaf.start;
				for (j < d.length) array[i + j] = d[j];
				leaf = leaf.next;
			}
			var i = leaf.start, j = 0, d = leaf.data, max = cursor;
			while (j < max) {
				array[i + j] = d[j];
				j = j + 1;
			}
		}
		return array;
	}
	def apply(f: T -> void) {
		if (first != null) {
			var leaf = first;
			while (leaf.next != null) {
				var d = leaf.data;
				for (j < d.length) f(d[j]);
				leaf = leaf.next;
			}
			var d = leaf.data, max = cursor;
			for (j < max) f(d[j]);
		}
	}
}

class Sequence<T> {
	var array: Array<T>;
	var size: int;
	def none: T;
	
	def add(item: T) {
		if (size == 0) array = Array<T>.new(TreeSeq.initial);
		else if (size == array.length) array = TreeSeq.grow(array, size * 2);
		array[size] = item;
		size = size + 1;
	}
	def get(index: int) -> T {
		return array[index];
	}
	def set(index: int, item: T) {
		array[index] = item;
	}
	def copy() -> Array<T> {
		if (array == null) return Array<T>.new(0);
		return TreeSeq.copy(array, Array<T>.new(size));
	}
	def apply(f: T -> void) {
		for (i < size) {
			f(array[i]);
		}
	}
}
