// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Based on the Java version by Jonathan Gibbons (c) 1995 Sun Microsystems.
// @author Ben L. Titzer
component Richards {
	// Task IDs
	def I_IDLE     = 1;
	def I_WORK     = 2;
	def I_HANDLERA = 3;
	def I_HANDLERB = 4;
	def I_DEVA     = 5;
	def I_DEVB     = 6;

	// Packet types
	def K_DEV  = 1000;
	def K_WORK = 1001;

	var qlayout  = 0;
	var tracing = false;

	def main(args: Array<string>) -> int {
		var iterations = Util.intArg(args, 10);
		for (i < iterations) {
			if (!run()) System.error("RichardsError", "incorrect results");
		}
		return 0;
	}
	def run() -> bool {
		TaskState.reset();

		IdleTask.new(I_IDLE, 1, 1000);

		var wkq = Packet.new(null, 0, K_WORK);
		wkq = Packet.new(wkq, 0, K_WORK);
		WorkTask.new(I_WORK, 1000, wkq);

		wkq = Packet.new(null, I_DEVA, K_DEV);
		wkq = Packet.new(wkq, I_DEVA, K_DEV);
		wkq = Packet.new(wkq, I_DEVA, K_DEV);
		HandlerTask.new(I_HANDLERA, 2000, wkq);

		wkq = Packet.new(null, I_DEVB, K_DEV);
		wkq = Packet.new(wkq, I_DEVB, K_DEV);
		wkq = Packet.new(wkq, I_DEVB, K_DEV);
		HandlerTask.new(I_HANDLERB, 3000, wkq);

		wkq = null;
		DeviceTask.new(I_DEVA, 4000, wkq);
		DeviceTask.new(I_DEVB, 5000, wkq);

		TaskState.schedule();

		return TaskState.qpktCount == 2322 && TaskState.holdCount == 928;
	}
	def trace(a: int) {
		if (--qlayout <= 0) {
			System.ln();
			qlayout = 50;
		}
		System.putc(byte.!(a));
	}
}

class Packet {
	def BUFSIZE: int = 3;
	var link: Packet;
	var id: int;
	var kind: int;
	var a1: int;
	var a2: Array<int> = Array.new(4);

	new(link, id, kind) { }

	def appendTo(list: Packet) -> Packet {
		link = null;
		if (list == null) return this;
		var p = list;
		while (p.link != null) p = p.link;
		p.link = this;
		return list;
	}
}

class Task {
	var link: Task;
	var id: int;
	var pri: int;
	var wkq: Packet;
	var state: int;

	new(id, pri, wkq, state) {
		link = TaskState.taskList;
		TaskState.taskList = this;
		TaskState.taskTab[id] = this;
	}

	def fn(packet: Packet) -> Task;

	def waitTask() -> Task {
		state = state | TaskState.WAITBIT;
		return this;
	}
	def hold() -> Task {
		TaskState.holdCount++;
		state = state | TaskState.HOLDBIT;
		return link;
	}
	def release(i: int) -> Task {
		var t = TaskState.findtcb(i);
		t.state = t.state & (-1 ^ TaskState.HOLDBIT);
		return if(t.pri > pri, t, this);
	}
	def qpkt(pkt: Packet) -> Task {
		var t = TaskState.findtcb(pkt.id);
		if (t == null) return t;

		TaskState.qpktCount++;

		pkt.link = null;
		pkt.id = id;

		if (t.wkq == null) {
			t.wkq = pkt;
			t.state = t.state | TaskState.PKTBIT;
			if (t.pri > pri) return t;
		} else {
			t.wkq = pkt.appendTo(t.wkq);
		}
		return this;
	}
}

// static parts of the Task class
component TaskState {
	// constants that should be inlined by the compiler
	def PKTBIT  = 1;
	def WAITBIT = 2;
	def HOLDBIT = 4;

	def S_RUN         = 0;
	def S_RUNPKT      = 1; // PKTBIT;
	def S_WAIT        = 2; // WAITBIT;
	def S_WAITPKT     = 3; // WAITBIT + PKTBIT;
	def S_HOLD        = 4; // HOLDBIT;
	def S_HOLDPKT     = 5; //HOLDBIT + PKTBIT;
	def S_HOLDWAIT    = 6; // HOLDBIT + WAITBIT;
	def S_HOLDWAITPKT = 7; // HOLDBIT + WAITBIT + PKTBIT;

	var taskTab = Array<Task>.new(10);
	var taskList: Task;
	var holdCount: int;
	var qpktCount: int;

	def findtcb(id: int) -> Task {
		return taskTab[id];
	}
	def reset() {
		holdCount = 0;
		qpktCount = 0;
		taskList = null;
	}
	def schedule() {
		var t = taskList;
		while (t != null) {
			var pkt: Packet;

			match (t.state) {
				S_WAITPKT => {
					pkt = t.wkq;
					t.wkq = pkt.link;
					t.state = if(t.wkq == null, S_RUN, S_RUNPKT);
					if (Richards.tracing) Richards.trace('0');
					t = t.fn(pkt);
				}
				S_RUN, S_RUNPKT => {
					if (Richards.tracing) Richards.trace('0');
					t = t.fn(pkt);
				}
				S_WAIT, S_HOLD, S_HOLDPKT, S_HOLDWAIT, S_HOLDWAITPKT => {
					t = t.link;
				}
			} else {
				return; // no cases matched
			}
		}
	}
}

class DeviceTask extends Task {
	var v1: Packet;
	new(id: int, pri: int, wkq: Packet)
		: super(id, pri, wkq, if(wkq != null, TaskState.S_WAITPKT, TaskState.S_WAIT)) { }
	def fn(pkt: Packet) -> Task {
		if (pkt == null) {
			if (v1 == null) return waitTask();
			pkt = v1;
			v1 = null;
			return qpkt(pkt);
		} else {
			v1 = pkt;
			if (Richards.tracing) Richards.trace(pkt.a1);
			return hold();
		}
	}
}

class HandlerTask extends Task {
	var workpkts: Packet;
	var devpkts: Packet;
	new(id: int, pri: int, wkq: Packet)
		: super(id, pri, wkq, if(wkq != null, TaskState.S_WAITPKT, TaskState.S_WAIT)) { }
	def fn(pkt: Packet) -> Task {
		if (pkt != null) {
			if (pkt.kind == Richards.K_WORK) workpkts = pkt.appendTo(workpkts);
			else devpkts = pkt.appendTo(devpkts);
		}

		if (workpkts != null) {
			var workpkt = workpkts;
			var count = workpkt.a1;

			if (count > 3) {
				workpkts = workpkts.link;
				return qpkt(workpkt);
			}

			if (devpkts != null) {
				var devpkt = devpkts;
				devpkts = devpkts.link;
				devpkt.a1 = workpkt.a2[count];
				workpkt.a1 = count + 1;
				return qpkt(devpkt);
			}
		}

		return waitTask();
	}
}

class IdleTask extends Task {
	var v1: int;
	var v2: int;
	new(id: int, v1, v2) : super(id, 0, null, TaskState.S_RUN) { }
	def fn(pkt: Packet) -> Task {
		--v2;
		if (v2 == 0) {
			return hold();
		} else if ((v1 & 1) == 0) {
			v1 = (v1 >>> 1);
			return release(Richards.I_DEVA);
		} else {
			v1 = (v1 >>> 1) ^ 0XD008;
			return release(Richards.I_DEVB);
		}
	}
}

class WorkTask extends Task {
	var handler: int;
	var n: int;
	new(id: int, pri: int, wkq: Packet)
		: super(id, pri, wkq, if(wkq != null, TaskState.S_WAITPKT, TaskState.S_WAIT)) {
		handler = Richards.I_HANDLERA;
	}
	def fn(pkt: Packet) -> Task {
		if (pkt == null) {
			return waitTask();
		} else {
			handler = if(handler == Richards.I_HANDLERA,
				Richards.I_HANDLERB,
				Richards.I_HANDLERA);
			pkt.id = handler;

			pkt.a1 = 0;
			for (i < 4) {
				n++;
				if (n > 26) n = 1;
				pkt.a2[i] = 'A' + (n - 1);
			}
			return qpkt(pkt);
		}
	}
}
