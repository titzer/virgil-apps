// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This program implements a simple (unbalanced) binary tree,
// representing each node as an object. The initializer builds
// a tree for a set of randomly generated integers; tree search
// is used as a benchmark for execution performance at runtime.
class Value {
	def val: int;
	new(val) { }
}

class Node<T> {
	def key: int;
	var left: Node<T>;
	var right: Node<T>;
	var val: T;

	new(key) {
		left = null;
		right = null;
	}
}

class Tree<T> {
	def none: T;
	var root: Node<T>;

	new(none) { }

	def insert(k: int, v: T) {
		if (root == null) {
			root = Node<T>.new(k);
			root.val = v;
		} else {
			insertAt(root, k).val = v;
		}
	}
	def insertAt(n: Node<T>, k: int) -> Node<T> {
		if (k <= n.key) {
			if (n.left == null) {
				n.left = Node<T>.new(k);
				return n.left;
			} else {
				return insertAt(n.left, k);
			}
		} else {
			if (n.right == null) {
				n.right = Node<T>.new(k);
				return n.right;
			} else {
				return insertAt(n.right, k);
			}
		}
	}
	def search(k: int) -> T {
		return searchAt(root, k);
	}
	def searchAt(n: Node<T>, k: int) -> T {
		if (n == null) {
			return none;
		} else if (k < n.key) {
			return searchAt(n.left, k);
		} else if (k > n.key) {
			return searchAt(n.right, k);
		} else {
			return n.val;
		}
	}
}

component PolyTree {
	var seed = 1;
	var tree_val = Tree<Value>.new(null);
	var tree_int = Tree<int>.new(0);
	var v: Value = null;

	new() {
		for (i < 50) {
			var k = rand() % 200;
			//tree_val.insert(k, Value.new(k));
			tree_int.insert(k, k);
		}
	}
	def main(args: Array<Array<byte>>) {
		var max = Util.intArg(args, 100);
		var cumul1 = 0;
		var cumul2 = 0;
		for (i < max) {
			for (j < 200) {
				cumul2 = cumul2 + tree_int.search(j);
			}
		}
		System.puti(cumul2);
		System.ln();
	}
	def rand() -> int {
		seed = 1664525 * seed + 1013904223;
		return seed;
	}
}
