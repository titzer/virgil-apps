// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A benchmark with a doubly-linked list.
component LinkedList {
	var list: List;
	var finder: Finder;

	new() {
		finder = Finder.new();
		list = List.new();
		list.add(Data.new(0));
		list.add(Data.new(1));
		list.add(Data.new(2));
		list.add(Data.new(3));
		list.add(Data.new(4));
		list.add(Data.new(5));
		list.add(Data.new(6));
		list.add(Data.new(7));
		list.add(Data.new(8));
		list.add(Data.new(9));
		list.add(Data.new(10));
		list.add(Data.new(11));
		list.add(Data.new(12));
	}
	def main(args: Array<Array<byte>>) {
		var max = Util.intArg(args, 1000);
		for (i < max) {
			finder.reset(7);
			if (i % 100 == 0) list.apply(print);
			list.apply(finder.compare);
			if (i % 100 == 1) list.apply(print);
		}
		System.ln();
	}
	def print(d: Data) {
		System.puti(d.val);
		System.putc(' ');
	}
}

class List {
	var head: Link;
	var tail: Link;

	def add(d: Data) {
		if ( head == null ) {
			head = tail = Link.new(d);
		} else {
			var next = Link.new(d);
			tail.next = next;
			next.prev = tail;
			tail = tail.next;
		}
	}
	def apply(f: Data -> void) {
		for (pos = head; pos != null; pos = pos.next) f(pos.data);
	}
	def applyRev(f: Data -> void) {
		for (pos = tail; pos != null; pos = pos.prev) f(pos.data);
	}
}

class Link {
	def data: Data;
	var next: Link;
	var prev: Link;

	new(data) { }

	def insert(d: Data) {
		var next = Link.new(d);
		next.next = this.next;
		this.next.prev = next;
		this.next = next;
	}
}

class Data {
	def val: int;
	new(val) { }
}

class Finder {
	var found: bool;
	var val: int;
	var index: int;

	def compare(d: Data) {
		if (!found) {
		   index++;
		   if (val == d.val) found = true;
		}
	}

	def reset(v: int) {
		val = v;
		found = false;
		index = 0;
	}
}
