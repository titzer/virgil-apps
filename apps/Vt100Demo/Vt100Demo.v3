var buf = StringBuilder.new();
def STDIN = 0;
def STDOUT = 1;
def stdout = System.fileWriteK(1, _, _, _);

// TODO: use ioctl to set raw mode: https://github.com/google/goterm/blob/master/term/termios.go

def main() {
	var term = Terminal.new();
	var pos = term.getCursor();
	buf.put2("start=(%d, %d)\n", pos.row, pos.col);
	buf.out(stdout);
	Vt100.moveCursor(999, 999);
	var size = term.getCursor();
	Vt100.moveCursor(pos.row, pos.col);
	while (true) {
		var pos = term.getCursor();
		buf.put2("pos=(%d, %d)\n", pos.row, pos.col);
		var left = System.fileLeft(STDIN);
		var ch = System.fileRead(STDIN);
		if (ch < 0) break;
		buf.put3("left=%d, read: %x (%c)\n", left, ch, printable(ch));
		buf.out(stdout);
		buf.reset();
	}
}

def readBuf(length: int) {
	var input = Array<byte>.new(length);
	while (true) {
		var read = System.fileReadK(0, input, 0, input.length);
		if (read < 0) return;
		buf.put1("read %d: ", read);
		for (i < read) {
			buf.putx_8(input[i]);
		}
		buf.ln();
		System.puts(buf.toString());
	}
}

def printable(ch: int) -> byte {
	if (ch < ' ' || ch > 127) return ' ';
	return byte.view(ch);
}

type Pos(row: u16, col: u16) #unboxed { }

def req_STATUS = "\x1b[5n";
def req_CURSOR = "\x1b[6n";
def ESC = '\x1b';

class Terminal {
	private var buf = Vector<byte>.new();

	def getCursor() -> Pos {
		out(req_CURSOR);
		readUpTo(ESC);
		if (!expect('[')) return Pos(0, 0);
		var posR = buf.length;
		readUpTo(';');
		var row = Ints.parsePosDecimal(buf.array, posR).1;

		var posC = buf.length;
		readUpTo('R');
		var col = Ints.parsePosDecimal(buf.array, posC).1;
		return Pos(u16.!(row), u16.!(col));
	}

	private def in_byte() -> int {
		return System.fileRead(STDIN);
	}
	private def out(r: Array<byte>) {
		System.fileWriteK(STDOUT, r, 0, r.length);
	}
	private def expect(ch: byte) -> bool {
		return in_byte() == ch;
	}
	private def readUpTo(ch: byte) {
		while (true) {
			var g = in_byte();
			if (g < 0) return;
			buf.put(byte.!(g));
			if (g == ch) return;
		}
	}
}

type Vt100Response {
	// Setup commands
	case DeviceOK;
	case DeviceFailure;
	case DeviceCode(c: string);
	case CursorPosition(row: int, col: int);
}
