// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
// Based on the Java-pro version of the multi-language
// Havlak loop finder benchmark by rhundt.

// Represents an edge between two basic blocks
class BasicBlockEdge {
	var from: BasicBlock;
	var to: BasicBlock;
	new(cfg: CFG, fromName: int, toName: int) {
		from = cfg.createNode(fromName);
		to = cfg.createNode(toName);
		from.outEdges.insert(to);
		to.inEdges.insert(from);
		cfg.edgeList.add(this);
	}
}
// Represents a basic block
class BasicBlock {
	def name: int;
	def inEdges = Sequence<BasicBlock>.new();
	def outEdges = Sequence<BasicBlock>.new();
	var dfsNumber: int;
	new(name) { Globals.numBasicBlocks++; }
	def dump() { }
}
// Represents a control flow graph
class CFG {
	def blocks = Sequence<BasicBlock>.new();
	def edgeList = Sequence<BasicBlockEdge>.new();
	var startNode: BasicBlock;

	def createNode(name: int) -> BasicBlock {
		if (name >= blocks.length) return newNode(name);
		var node = blocks.get(name);
		if (node == null) return newNode(name);
		return node;
	}
	def newNode(name: int) -> BasicBlock {
		if (blocks.array == null || name >= blocks.array.length) blocks.grow(5 + name + blocks.length);
		if (name >= blocks.length) blocks.length = name + 1;
		var node = BasicBlock.new(name);
		blocks.set(name, node);
		if (startNode == null) startNode = node;
		return node;
	}
	def dump() {
		for (i < blocks.length) {
			var b = blocks.get(i);
			if (b != null) b.dump();
		}
	}
	def getBlock(num: int) -> BasicBlock {
		return blocks.get(num);
	}
	def size() -> int {
		return blocks.length;
	}
	def clearDfsNumbers() {
		var a = blocks.array, max = blocks.length;
		for (i < max) a[i].dfsNumber = 0x7FFFFFFF;
	}
}
// Represents a simple loop
class SimpleLoop {
	def basicBlocks = Sequence<BasicBlock>.new();
	def children = Sequence<SimpleLoop>.new();

	var parent: SimpleLoop;
	var header: BasicBlock;
	var isRoot: bool;
	var isReducible: bool;
	var counter: int;
	var nestingLevel: int;
	var depthLevel: int;

	def setParent(l: SimpleLoop) {
		parent = l;
		if (l != null) l.children.insert(this);
	}
	def setHeader(bb: BasicBlock) {
		basicBlocks.insert(bb);
		header = bb;
	}
	def dump(indent: int) {
		// TODO: implement dumping
	}
}
// The loop structure graph
class LSG {
	def loops: Sequence<SimpleLoop> = Sequence.new();
	var root: SimpleLoop;
	var loopCounter: int;

	def createNewLoop() -> SimpleLoop {
		var loop = SimpleLoop.new();
		loop.counter = loopCounter++;
		return loop;
	}
	def dump() {
		dumpRec(root, 0);
	}
	def dumpRec(loop: SimpleLoop, indent: int) {
		loop.dump(indent);
		for (i < loop.children.length) {
			dumpRec(loop.children.get(i), indent + 1);
		}
	}
	def calculateNestingLevel() {
		for (i < loops.length) {
			var l = loops.get(i);
			if (l.isRoot) continue;
			if (l.parent == null) l.setParent(root);
		}
		calculateNestingLevelRec(root, 0);
	}
	def calculateNestingLevelRec(loop: SimpleLoop, depth: int) {
		if (loop == null) return; // TODO: loop shouldn't be null
		loop.depthLevel = depth;
		for (i < loop.children.length) {
			var l = loop.children.get(i);
			calculateNestingLevelRec(l, depth + 1);
			var level = 1 + l.nestingLevel;
			if (level > loop.nestingLevel) loop.nestingLevel = level;
		}
	}
}
// A utility class which represents an efficient, growable, appendable array
class Sequence<T> {
	var array: Array<T>;
	var length: int;
	
	// add an item to the end of this sequence
	def add(item: T) {
		var s = length;
		if (s == 0) array = Array.new(10);
		else if (s == array.length) expand(s + s);
		array[s] = item;
		length = s + 1;
	}
	// inserts the element into the sequence, if it is not already present
	def insert(item: T) {
		var s = length;
		if (s == 0) {
			// nothing in the array yet
			array = Array.new(10);
		} else {
			// search the array for the item
			for (e in array) if (e == item) return;
			if (s == array.length) expand(s + s);
		}
		array[s] = item;
		length = s + 1;
	}
	// get the item at the specified index
	def get(index: int) -> T {
		return array[index];
	}
	// update the item at the specified index
	def set(index: int, item: T) {
		array[index] = item;
	}
	// clear this sequence and return it
	def clear() -> Sequence<T> {
		length = 0;
		return this;
	}
	// grow the internal storage to the new length
	def grow(nsize: int) -> Sequence<T> {
		if (array == null) array = Array.new(nsize);
		else if (array.length < nsize) expand(nsize);
		return this;
	}
	// grow the internal storage of this sequence to the new length
	private def expand(nsize: int) {
		var n = Array<T>.new(nsize), a = array, s = length;
		for (i < s) n[i] = a[i];
		array = n;
	}
	// check whether the given element is contained in this sequence
	def contains(e: T) -> bool {
		var a = array;
		for (i < length) if (e == a[i]) return true;
		return false;
	}
}
// global data structures.
component Globals {
	var maxSize: int;
	var numBasicBlocks: int;
	var nonBackPreds = Sequence<IntegerSet>.new();
	var backPreds = Sequence<Sequence<int>>.new();
	var header: Array<int>;
	var bbtype: Array<byte>;
	var last: Array<int>;
	var nodes: Array<UnionFindNode>;
	var maxMillis: int;
	var minMillis: int;
}
// The algorithm uses the Union/Find algorithm to collapse
// complete loops into a single node. These nodes and the
// corresponding functionality are implemented with this class
class UnionFindNode {
	var parent: UnionFindNode;
	var bb: BasicBlock;
	var loop: SimpleLoop;
	var dfsNumber: int;

	// Initialize this node.
	def initNode(bb: BasicBlock, dfsNumber: int) {
		this.parent = this;
		this.bb = bb;
		this.dfsNumber = dfsNumber;
		this.loop = null;
	}
	// Union/Find Algorithm - The find routine.
	//
	// Implemented with Path Compression (inner loops are only
	// visited and collapsed once, however, deep nests would still
	// result in significant traversals).
	def findSet() -> UnionFindNode {
		var nodeList = Sequence<UnionFindNode>.new();
		var node = this;
		while (node != node.parent) {
			if (node.parent != node.parent.parent) {
				nodeList.add(node);
			}
			node = node.parent;
		}

		// Path Compression, all nodes' parents point to the 1st level parent.
		var len = nodeList.length;
		for (i < len) {
			var iter = nodeList.get(i);
			iter.parent = node.parent;
		}
		return node;
	}
	// Union/Find Algorithm - The union routine.
	//
	// Trivial. Assigning parent pointer is enough,
	// we rely on path compression.
	def union(basicBlock: UnionFindNode) {
		parent = basicBlock;
	}
}
// A set of integers
// XXX: profile the size of these integer sets => worth it to hash?
// TODO: would a sequence<int> and .insert() suffice?
class IntegerSet {
	var arr = Array<int>.new(2);
	var length: int;
	def add(e: int) {
		for (i < length) {
			if (arr[i] == e) return;
		}
		if (length == arr.length) {
			var old = arr;
			arr = Array.new(old.length << 1);
			for (i < old.length) arr[i] = old[i];
		}
		arr[length++] = e;
		return;
	}
}
// TODO: use this instead of global state needed for finding loops
class LoopFinderState {
	var size: int;
	var nonBackPreds = Sequence<IntegerSet>.new().grow(size);
	var backPreds = Sequence<Sequence<int>>.new().grow(size);
	var header: Array<int>;
	var bbtype: Array<byte>;
	var last: Array<int>;
	var nodes: Array<UnionFindNode>;
	var maxMillis: int;
	var minMillis: int;

	new(size) { }
	def clear(nsize: int) {
	}
}
// The main algorithm that finds loops
class HavlakLoopFinder {
	// Marker for uninitialized nodes.
	def UNVISITED = 0x7FFFFFFF;
	// Constants for basic block types
	def BB_TOP         = '\x00'; // uninitialized
	def BB_NONHEADER   = '\x01'; // a regular BB
	def BB_REDUCIBLE   = '\x02'; // reducible loop
	def BB_SELF        = '\x03'; // single BB loop
	def BB_IRREDUCIBLE = '\x04'; // irreducible loop
	def BB_DEAD        = '\x05'; // a dead BB
	def BB_LAST        = '\x06'; // Sentinel

	def cfg: CFG;      // Control Flow Graph
	def lsg: LSG;      // Loop Structure Graph

	new(cfg, lsg) { }

	// IsAncestor
	//
	// As described in the paper, determine whether a node 'w' is a
	// "true" ancestor for node 'v'.
	//
	// Dominance can be tested quickly using a pre-order trick
	// for depth-first spanning trees. This is why DFS is the first
	// thing we run below.
	def isAncestor(w: int, v: int, last: Array<int>) -> bool {
		return ((w <= v) && (v <= last[w]));
	}

	// DFS - Depth-First-Search
	//
	// DESCRIPTION:
	// Simple depth first traversal along out edges with node numbering.
	def doDFS(currentNode: BasicBlock,
			nodes: Array<UnionFindNode>,
			last: Array<int>,
			current: int) -> int {
		nodes[current].initNode(currentNode, current);
		currentNode.dfsNumber = current;

		var lastid = current;
		// for (BasicBlock target : currentNode.outEdges) {
		var len = currentNode.outEdges.length;
		for (i < len) {
			var target = currentNode.outEdges.get(i);
			if (target.dfsNumber == UNVISITED) {
				lastid = doDFS(target, nodes, last, lastid + 1);
			}
		}
		last[currentNode.dfsNumber] = lastid;
		return lastid;
	}

	// findLoops
	//
	// Find loops and build loop forest using Havlak's algorithm, which
	// is derived from Tarjan. Variable names and step numbering has
	// been chosen to be identical to the nomenclature in Havlak's
	// paper (which, in turn, is similar to the one used by Tarjan).
	def findLoops() {
		if (cfg.startNode == null) return;

		var startMillis = System.ticksMs();
		var size = cfg.size();

		clearLoopFinderState();

		// Step a:
		//	 - initialize all nodes as unvisited.
		//	 - depth-first traversal and numbering.
		//	 - unreached BB's are marked as dead.

		doDFS(cfg.startNode, Globals.nodes, Globals.last, 0);

		// Step b:
		//	 - iterate over all nodes.
		//
		//	 A backedge comes from a descendant in the DFS tree, and non-backedges
		//	 from non-descendants (following Tarjan).
		//
		//	 - check incoming edges 'v' and add them to either
		//		 - the list of backedges (backPreds) or
		//		 - the list of non-backedges (Globals.nonBackPreds)
		for (w < size) {
			Globals.header[w] = 0;
			Globals.bbtype[w] = BB_NONHEADER;

			var nodeW = Globals.nodes[w].bb;
			if (nodeW == null) {
				Globals.bbtype[w] = BB_DEAD;
				continue;	// dead BB
			}

			var len1 = nodeW.inEdges.length;
			for (i < len1) {
				var nodeV = nodeW.inEdges.get(i);
				var v = nodeV.dfsNumber;
				if (v == UNVISITED) continue; // dead node
				if (isAncestor(w, v, Globals.last)) Globals.backPreds.get(w).add(v);
				else Globals.nonBackPreds.get(w).add(v);
			}
		}

		// Start node is root of all other loops.
		Globals.header[0] = 0;

		// Step c:
		//
		// The outer loop, unchanged from Tarjan. It does nothing except
		// for those nodes which are the destinations of backedges.
		// For a header node w, we chase backward from the sources of the
		// backedges adding nodes to the set P, representing the body of
		// the loop headed by w.
		//
		// By running through the nodes in reverse of the DFST preorder,
		// we ensure that inner loop headers will be processed before the
		// headers for surrounding loops.
		for (w = size - 1; w >= 0; w--) {
			// this is 'P' in Havlak's paper
			var nodePool = Sequence<UnionFindNode>.new();

			var nodeW = Globals.nodes[w].bb;
			if (nodeW == null) {
				continue;	// dead BB
			}

			// Step d:
			var len = Globals.backPreds.get(w).length;
			for (i < len) {
				var v = Globals.backPreds.get(w).get(i);
				if (v != w) nodePool.add(Globals.nodes[v].findSet());
				else Globals.bbtype[w] = BB_SELF;
			}

			// Copy nodePool to workList.
			var workList = Sequence<UnionFindNode>.new();

			for (j < nodePool.length) {
				workList.add(nodePool.get(j));
			}

			if (nodePool.length != 0) Globals.bbtype[w] = BB_REDUCIBLE;

			// work the list...
			for (j < workList.length) {
				var x = workList.get(j);

				// Step e:
				//
				// Step e represents the main difference from Tarjan's method.
				// Chasing upwards from the sources of a node w's backedges. If
				// there is a node y' that is not a descendant of w, w is marked
				// the header of an irreducible loop, there is another entry
				// into this loop that avoids w.
				var curr = Globals.nonBackPreds.get(x.dfsNumber);
				for (i < curr.length) {
					var iter = curr.arr[i];
					var y = Globals.nodes[iter];
					var ydash = y.findSet();

					if (!isAncestor(w, ydash.dfsNumber, Globals.last)) {
						Globals.bbtype[w] = BB_IRREDUCIBLE;
						Globals.nonBackPreds.get(w).add(ydash.dfsNumber);
					} else {
						if (ydash.dfsNumber != w) {
							if (!nodePool.contains(ydash)) {
								workList.add(ydash);
								nodePool.add(ydash);
							}
						}
					}
				}
			}

			// Collapse/Unionize nodes in a SCC to a single node
			// For every SCC found, create a loop descriptor and link it in.
			if ((nodePool.length > 0) || (Globals.bbtype[w] == BB_SELF)) {
				var loop = lsg.createNewLoop();

				loop.setHeader(nodeW);
				loop.isReducible = (Globals.bbtype[w] != BB_IRREDUCIBLE);

				// At this point, one can set attributes to the loop, such as:
				//
				// the bottom node:
				//		iter	= Globals.backPreds(w).begin();
				//		loop bottom is: nodes(iter).node);
				//
				// the number of backedges:
				//		Globals.backPreds(w).length
				//
				// whether this loop is reducible:
				//		Globals.bbtype(w) != BB_IRREDUCIBLE
				Globals.nodes[w].loop = loop;

				for (j < nodePool.length) {
					var node = nodePool.get(j);
					// Add nodes to loop descriptor.
					Globals.header[node.dfsNumber] = w;
					node.union(Globals.nodes[w]);
					// Nested loops are not added, but linked together.
					if (node.loop != null) node.loop.setParent(loop);
					else loop.basicBlocks.add(node.bb);
				}

				lsg.loops.add(loop);
			}	// nodePool.length
		}	// Step c

		var totalMillis = System.ticksMs() - startMillis;

		if (totalMillis > Globals.maxMillis) Globals.maxMillis = totalMillis;
		if (totalMillis < Globals.minMillis) Globals.minMillis = totalMillis;
	}
	def clearLoopFinderState() {
		var size = cfg.size();
		// XXX: also null out the entries to reduce live data?
		Globals.nonBackPreds.clear().grow(size);
		Globals.backPreds.clear().grow(size);
		if (size > Globals.maxSize) {
			Globals.header = Array.new(size);
			Globals.bbtype = Array.new(size);
			Globals.last = Array.new(size);
			Globals.nodes = Array.new(size);
			Globals.maxSize = size;
		}

		for (i < size) {
			// XXX: reuse storage from previous loop find
			Globals.nonBackPreds.add(IntegerSet.new());
			Globals.backPreds.add(Sequence<int>.new());
			Globals.nodes[i] = UnionFindNode.new();
		}
		cfg.clearDfsNumbers();
	}
}
// The main tester of the benchmark
component Havlak {
	def cfg = CFG.new();
	def lsg = LSG.new();
	def root = cfg.createNode(0);

	// Create 4 basic blocks, corresponding to and if/then/else clause
	// with a CFG that looks like a diamond
	def buildDiamond(start: int) -> int {
		var bb0 = start;
		BasicBlockEdge.new(cfg, bb0, bb0 + 1);
		BasicBlockEdge.new(cfg, bb0, bb0 + 2);
		BasicBlockEdge.new(cfg, bb0 + 1, bb0 + 3);
		BasicBlockEdge.new(cfg, bb0 + 2, bb0 + 3);

		return bb0 + 3;
	}
	// Connect two existing nodes
	def buildConnect(start: int, end: int) {
		BasicBlockEdge.new(cfg, start, end);
	}
	// Form a straight connected sequence of n basic blocks
	def buildStraight(start: int, n: int) -> int {
		for (i < n) {
			buildConnect(start + i, start + i + 1);
		}
		return start + n;
	}
	// Construct a simple loop with two diamonds in it
	def buildBaseLoop(from: int) -> int {
		var header = buildStraight(from, 1);
		var diamond1 = buildDiamond(header);
		var d11 = buildStraight(diamond1, 1);
		var diamond2 = buildDiamond(d11);
		var footer = buildStraight(diamond2, 1);
		buildConnect(diamond2, d11);
		buildConnect(diamond1, header);

		buildConnect(footer, from);
		footer = buildStraight(footer, 1);
		return footer;
	}
	// get the memory usage of the program
	def getMem() {
		var val = 5 * 1024; // TODO: get memory from GC
		puts("  Total Memory: ").puti(val).puts(" KB").ln();
	}
	// the main entrypoint to the benchmark
	def main(args: Array<string>) {
		puts("Welcome to LoopTesterApp, Virgil III edition").ln();
		puts("Constructing App...").ln();
		getMem();

		puts("Constructing Simple CFG...").ln();
		cfg.createNode(0);
		buildBaseLoop(0);
		cfg.createNode(1);
		BasicBlockEdge.new(cfg, 0, 2);

		puts("15000 dummy loops").ln();
		for (dummyloop = 0; dummyloop < 15000; dummyloop++) {
			var finder = HavlakLoopFinder.new(cfg, lsg);
			finder.findLoops();
		}

		puts("Constructing CFG...").ln();
		var n = 2;

		for (parlooptrees = 0; parlooptrees < 10; parlooptrees++) {
			cfg.createNode(n + 1);
			buildConnect(2, n + 1);
			n = n + 1;

			for (i < 100) {
				var top = n;
				n = buildStraight(n, 1);
				for (j < 25) {
					n = buildBaseLoop(n);
				}
				var bottom = buildStraight(n, 1);
				buildConnect(n, top);
				n = bottom;
			}
			buildConnect(n, 1);
		}

		getMem();
		System.puts("Performing Loop Recognition\n1 Iteration\n");
		var finder = HavlakLoopFinder.new(cfg, lsg);
		finder.findLoops();
		getMem();

		var max = 50;
		if (args.length > 0) max = Int.parse(args[0]);
		puts("Another ").puti(max).puts(" iterations...").ln();
		for (i < max) {
			System.putc('.');
			var finder2 = HavlakLoopFinder.new(cfg, LSG.new());
			finder2.findLoops();
		}

		ln();
		getMem();
		puts("# of loops: ").puti(lsg.loops.length).puts(" (including 1 artificial root node)").ln();
		puts("# of BBs  : ").puti(Globals.numBasicBlocks).ln();
		puts("# max time: ").puti(Globals.maxMillis).ln();
		puts("# min time: ").puti(Globals.minMillis).ln();
		lsg.calculateNestingLevel();
	}
	def puti(i: int) -> Havlak {
		return (System.puti(i), this).last;
	}
	def puts(s: string) -> Havlak {
		return (System.puts(s), this).last;
	}
	def ln() -> Havlak {
		return (System.ln(), this).last;
	}
}
