// A benchmark for a polymorphic hash table implementation
component HashBench {
	var intCount: int;
	var tupleCount: int;
	var objCount: int;
	var stringCount: int;
	var checksum: int;

	def strings = [
		"A", "scientific", "truth", "does", "not", "triumph", "by", "convincing", 
		"its", "opponents", "and", "making", "them", "see", "the", "light,", "but", 
		"rather", "because", "its", "opponents", "eventually", "die", "and", "a", 
		"new", "generation", "grows", "up", "that", "is", "familiar", "with", "it.",
		"--Max", "Planck"
	];

	def main(args: Array<string>) -> int {
		if (args.length < 4) {
			System.puts("Usage: HashBench <intCount> <tupleCount> <objCount> <stringCount>\n");
			return 1;
		}
		intCount = Int.parse(args[0]);
		tupleCount = Int.parse(args[1]);
		objCount = Int.parse(args[2]);
		stringCount = Int.parse(args[3]);

		for (i < 10) doBench();

		System.puti(checksum);
		System.ln();
		return 0;
	}
	def doBench() {
		// benchmark int-key map
		var intMap = HashMap<int, int>.new(int.!<int>, int.==);
		for (i < intCount) {
			intMap.set(Random.random(500), i + 3);
		}
		doGets(intMap, intCount * 2);

		// benchmark tuple-key map
		var tupleMap = HashMap<(int, int), int>.new(tupleHash, equal<(int, int)>);
		for (i < tupleCount) {
			var x = Random.random(50), y = Random.random(10);
			tupleMap.set((x, y), i + 4);
		}
		doGets(tupleMap, tupleCount * 2);

		// benchmark object-key map
		var objMap = HashMap<DemoKey, int>.new(DemoKey.hash, DemoKey.equal);
		for (i < objCount) {
			objMap.set(DemoKey.new(strings[i % strings.length], Random.random(16)), i + 5);
		}
		doGets(objMap, objCount * 2);

		// benchmark string-key map
		var stringMap = HashMap<string, int>.new(stringHash, stringEqual);
		for (i < stringCount) {
			stringMap.set(strings[i % strings.length], i + 6);
		}
		doGets(stringMap, stringCount * 2);
	}
	def doGets<K>(map: HashMap<K, int>, count: int) {
		if (count == 0) return;
		var keys = map.keys();
		System.puts("gets ");
		System.puti(keys.length);
		System.puts(" keys\n");
		for (i < count) {
			checksum = checksum + map.get(keys[Random.random(keys.length)]);
		}
	}
	// equality for strings
	def stringEqual(a: string, b: string) -> bool {
		if (a == b) return true;
		if (a.length != b.length) return false;
		for (i < a.length) {
			if (a[i] != b[i]) return false;
		}
		return true;
	}
	// hash function for strings
	def stringHash(str: string) -> int {
		var hashval = str.length;
		for (c in str) hashval = hashval * 31 + c;
		return hashval;
	}
	def tupleHash(a: int, b: int) -> int {
		return a + (b << 4);
	}
	def equal<T>(a: T, b: T) -> bool {
		return a == b;
	}
}
// Internal data structure needed by HashMap to represent chained buckets.
class Bucket<K, V> {
	def key: K;
	var val: V;
	var next: Bucket<K, V>;
	new(key, val, next) { }
}
// A general-purpose HashMap implementation.
class HashMap<K, V> {
	def hash: K -> int;		// user-supplied hash function
	def equals: (K, K) -> bool;	// user-supplied equality method
	var table: Array<Bucket<K, V>>;	// lazily allocated table
	new(hash, equals) { }

	// get the value for the given key, default if not found
	def get(key: K) -> V {
		var none: V; 
		if (table == null) return none; // empty table
		// hash and do bucket search
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) {
				return bucket.val;
			}
		}
		return none;
	}
	// insert or overwrite the value for the given key
	def set(key: K, val: V) {
		if (table == null) {
			// table not yet allocated,create
			table = Array.new(11);
			insert(Bucket.new(key, val, null));
			return;
		}
		// hash and search the table
		var hashval = dohash(key), i = 0;
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				return;
			}
			i++;
		}
		// insert into table
		table[hashval] = Bucket.new(key, val, table[hashval]);
		if (i > 4 && table.length < 1001) balance(); // rebalance if chain too long
	}
	// get an array of all the keys
	def keys() -> Array<K> {
		var count = 0;
		for (b in table) {
			for (bucket = b; bucket != null; bucket = bucket.next) count++;
		}
		var array = Array<K>.new(count), i = 0;
		for (b in table) {
			for (bucket = b; bucket != null; bucket = bucket.next) array[i++] = bucket.key;
		}
		return array;
	}
	private def insert(bucket: Bucket<K, V>) {
		var hashval = dohash(bucket.key);
		bucket.next = table[hashval];
		table[hashval] = bucket;
	}
	private def dohash(key: K) -> int {
		return (0x7FFFFFFF & hash(key)) % table.length;
	}
	private def balance() {
		var old = table, nlen = table.length * 3 + 1;
		table = Array.new(nlen);
		for (i < old.length) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = Bucket.new(b.key, b.val, table[hashval]);
			}
		}
	}
}
// A demo class that is used as a key in a hashmap
class DemoKey {
	def a: string;
	def b: int;
	def hash = HashBench.stringHash(a) + b;
	new(a, b) {}
	def equal(that: DemoKey) -> bool {
		return HashBench.stringEqual(this.a, that.a) && this.b == that.b;
	}
}
