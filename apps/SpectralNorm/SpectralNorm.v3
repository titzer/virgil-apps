// Copyright 2020 Ben L. Titzer. All rights reserved.

// Virgil implementation of the "spectralnorm" benchmark from the Computer Language Shootout.
// A straightforward translation from the C version.

def printd9(v: double) {  // XXX: factor out into Common.v3
	var bits = u64.view(v);
	if ((bits >> 63) != 0) System.putc('-');
	v = double.view(bits & ~(1uL << 63));
	if (v == double.infinity) return System.puts("Infinity");
	if (v != v) return System.puts("NaN");
	var mag = 1d;
	while ((mag * 10d) < v) mag = mag * 10d;
	while (mag > 1e-9) {
		var digit = int.truncd(v / mag);
		System.puti(digit);
		if (mag == 1d) System.putc('.');
		v -= mag * digit;
		mag = mag / 10;
	}
	// TODO: round last digit properly
}

def eval_A(i: int, j: int) -> double {
	return 1.0 / ((i + j) * (i + j + 1) / 2 + i + 1);
}

def eval_A_times_u(u: Array<double>, Au: Array<double>) {
	for (i < Au.length) {
		Au[i] = 0;
		for (j < u.length) {
			Au[i] += eval_A(i, j) * u[j];
		}
	}
}

def eval_At_times_u(u: Array<double>, Au: Array<double>) {
	for (i < Au.length) {
		Au[i] = 0;
		for (j < u.length) {
			Au[i] += eval_A(j, i) * u[j];
		}
	}
}

def eval_AtA_times_u(u: Array<double>, AtAu: Array<double>) {
	var v = Array<double>.new(u.length);
	eval_A_times_u(u, v);
	eval_At_times_u(v, AtAu);
}

def main(args: Array<string>) -> int {
	var N = Util.intArg(args, 2000);
	var u = Array<double>.new(N), v = Array<double>.new(N);

	for (i < N) u[i] = 1;

	for (i < 10) {
		eval_AtA_times_u(u, v);
		eval_AtA_times_u(v, u);
	}

	var vBv: double, vv: double;
	for (i < N) {
		vBv += u[i] * v[i];
		vv += v[i] * v[i];
	}
	printd9(double.sqrt(vBv/vv));
	System.ln();
	return 0;
}