// Handles the encoding of kinds and polymorphic bits into the hash codes of types.
component TypeHash {
	def KIND_SHIFT: u5  = 27;
	def HASH_MASK: u32  = 0x01FFFFFFu;
	def HAS_TYPE_VARS   = 0x01000000u;
	def HAS_TYPE_PARAMS = 0x02000000u;
	def POLY_MASK       = HAS_TYPE_VARS | HAS_TYPE_PARAMS;

	def do0(kind: Kind, salt: u25) -> u32 {
		var hash = (u32.view(kind.tag) << KIND_SHIFT) | salt;
		return hash;
	}
	def do1(kind: Kind, salt: u25, t: Type) -> u32 {
		var hash = (u32.view(kind.tag) << KIND_SHIFT) | salt;
		hash |= t.hash & POLY_MASK;
		var salt2 = 31u * (t.hash >> 16 ^ t.hash);
		return hash | (salt2 & HASH_MASK);
	}
	def doN(kind: Kind, salt: u25, at: Array<Type>) -> u32 {
		var hash = (u32.view(kind.tag) << KIND_SHIFT) | salt;
		hash = combine(hash, at);
		return hash;
	}
	def doMN(kind: Kind, salt: u25, at1: Array<Type>, at2: Array<Type>) -> u32 {
		var hash = (u32.view(kind.tag) << KIND_SHIFT) | salt;
		hash = combine(hash, at1);
		hash = combine(hash, at2);
		return hash;
	}
	def combine(hash: u32, at: Array<Type>) -> u32 {
		var salt = hash;
		salt += u32.view(at.length);
		for (t in at) {
			var h = t.hash;
			hash |= h & POLY_MASK;
			salt ^= (salt >> 16);
			salt = salt * 31u + h;
		}
		return hash | (salt & HASH_MASK);
	}
}

