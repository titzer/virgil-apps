class VstList<T>(list: List<T>) {
	def range() -> FileRange;
	def array() -> Array<T>;
}
class ErrorGen {
}
// visit 1: TypeEnv and TypeRef
class TypeEnv {
	def resolve(typeRef: TypeRef, error: ErrorGen) {
		if (typeRef.binding.tag == TypeConBinding.Unknown.tag) {
			// perform lookup by name and produce a new binding
			typeRef.binding = lookup(typeRef.token.image);
		}
		match (typeRef.binding) {
			Unknown => {
				// not found; report an error
			}
			Bound(t) => {
				// nothing to do
			}
			Array(mutable) => {
				// recurse on type args or abstract them
				// possible errors: arity != 1
			}
			Function => {
				var paramType = typeRef.typeRefs.list.head;
				var returnType = typeRef.typeRefs.list.tail.head;
				resolve(paramType, error);
				resolve(returnType, error);
				var sig = Signature.new(null, null); // TODO: unpack tuple types efficiently
				typeRef.binding = TypeConBinding.Bound(FuncTypeCache.get(sig));
				// no arity errors possible
			}
			Tuple => {
				// recurse on typeref args
			}
			Class(decl) => {
				// recurse on typeref args or abstract them
				// possible errors: arity mismatch, constraint not satisfied
			}
			Variant(decl) => {
				// recurse on typeref args or abstract them
				// possible errors: arity mismatch, constraint not satisfied
			}
		}
	}
	def lookup(s: string) -> TypeConBinding;
}
// A reference to a type; usually unresolved initially
class TypeRef {
	def left: TypeRef;
	def token: Token;
	def typeRefs: VstList<TypeRef>;
	var rtype: Type;
	var binding: TypeConBinding;

	new(left, token, typeRefs, rtype) {}
	def range() -> FileRange {
		return if(token != null, token.range(), typeRefs.range());
	}
	def error() -> Type {
		System.error("InternalError", Strings.format3("unresolved TypeRef: %s @ %d:%d", token.image, range().beginLine, range().beginColumn));
		return null;
	}
	def render(buffer: StringBuilder) -> StringBuilder {
		match (binding) {
			Unknown => buffer.puts(token.image);
			Bound(t) => return t.render(buffer);
			Array(mutable) => buffer.puts(if(mutable, "Array", "array"));
			Function => {
				var paramType = typeRefs.list.head, pfunc = paramType.isFunction();
				if (pfunc) buffer.putc('(');
				paramType.render(buffer);
				if (pfunc) buffer.putc(')');
				buffer.puts(" -> ");
				var returnType = typeRefs.list.tail.head;
				returnType.render(buffer);
				return buffer;
			}
			Tuple => {
				var list = typeRefs.list;
				if (list == null) {
					buffer.puts("void");
				} else if (list.tail == null) {
					list.head.render(buffer);
				} else {
					buffer.putc('(');
					Lists.render(buffer, TypeRef.render, list);
					buffer.putc(')');
				}
				return buffer;
			}
			Class(decl) => buffer.puts(decl.name());
			Variant(decl) => buffer.puts(decl.name());
		}
		if (typeRefs != null) {
			buffer.putc('<');
			Lists.render(buffer, TypeRef.render, typeRefs.list);
			buffer.putc('>');
		}
		return buffer;
	}
	def getType() -> Type {
		match (binding) {
			Bound(t) => return t;
			_ => return error();
		}
	}
	def isFunction() -> bool {
		match (binding) {
			Function => return true;
			Bound(t) => return FuncType.?(t);
			_ => return false;
		}
	}
}
type TypeConBinding {
	case Unknown;
	case Array(mutable: bool);
	case Bound(t: Type);
	case Function;
	case Tuple;
	case Class(decl: VstClass);
	case Variant(decl: VstClass);
}
// Vision 2: make it an AST node
class VstTypeRef {
	var binding: Type;
	def render(buf: StringBuilder) -> StringBuilder {
		if (binding == null) return buf.puts("?");
		return binding.render(buf);
	}
}
class VstFuncTypeRef(paramType: VstTypeRef, returnType: VstTypeRef) extends VstTypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		var pfunc = VstFuncTypeRef.?(paramType);
		if (pfunc) buf.putc('(');
		paramType.render(buf);
		if (pfunc) buf.putc(')');
		buf.puts(" -> ");
		returnType.render(buf);
		return buf;
	}
}
class VstTupleTypeRef(nested: VstList<VstTypeRef>) extends VstTypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		var list = nested.list;
		if (list == null) {
			buf.puts("void");
		} else if (list.tail == null) {
			list.head.render(buf);
		} else {
			buf.putc('(');
			Lists.render(buf, VstTypeRef.render, list);
			buf.putc(')');
		}
		return buf;
	}
}
class VstNamedTypeRef(name: Token, nested: VstList<VstTypeRef>) extends VstTypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts(name.image);
		if (nested != null) {
			buf.putc('<');
			Lists.render(buf, VstTypeRef.render, nested.list);
			buf.putc('>');
		}
		return buf;
	}
}
def resolve(tref: VstTypeRef) -> Type {
	if (tref.binding != null) return tref.binding;
	match (tref) {
		x: VstFuncTypeRef => {
			var paramType = resolve(x.paramType);
			var returnType = resolve(x.returnType);
		}
		x: VstTupleTypeRef => {
			var nested = Lists.map(x.nested.list, resolve);
		}
		x: VstNamedTypeRef => {
			var nested = if(x.nested != null, Lists.map(x.nested.list, resolve));
		}
	}
	return tref.binding;
}
