// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum Kind {
	VOID, BOOL, INT, FLOAT, ARRAY, RANGE, SEQ, COMPONENT, CLASS, CLOSURE, TUPLE,
	TYPE_PARAM, TYPE_VAR, FUNC, VARIANT, VARIANT_CASE, DATA, ENUM,
	ENUM_SET, ALIAS, POINTER, NULL
}

// Superclass of all type representations in the compiler. Subclasses represent
// specific kinds of types. Every type has a hash code that can be used in
// ubiquitous type maps.
class Type {
	def hash: u32;	// hash, kind and openness bits
	var array: ArrayType;  // cache for Array<this>; do not use directly

	new(hash) { }

	def ukind() -> u32 { return hash >> TypeHash.KIND_SHIFT; }
	def polymorphic() -> bool { return (hash & TypeHash.POLY_MASK) != 0; }
	def hasTypeVars() -> bool { return (hash & TypeHash.HAS_TYPE_VARS) != 0; }
	def hasTypeParams() -> bool { return (hash & TypeHash.HAS_TYPE_PARAMS) != 0; }
	def substitute(subst: TypeSubst) -> Type {
		if ((hash & TypeHash.POLY_MASK) == 0) return this;
		return recursiveSubst(this, subst);
	}
	def substParams(params: Array<TypeParamType>, args: Array<Type>) -> Type {
		if ((hash & TypeHash.POLY_MASK) == 0) return this;
		return recursiveSubst(this, TypeSubst.new(params, args, null));
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return render0(this, buf);
	}
}

// The singleton "void" type.
class VoidType extends Type {
	new() super(TypeHash.do0(Kind.VOID, Kind.VOID.tag)) { }
}

// The singleton "bool" type.
class BoolType extends Type {
	new() super(TypeHash.do0(Kind.BOOL, Kind.BOOL.tag)) { }
}

// Useful classification of integer sizes for 32 and 64-bit machines.
enum IntRank {
	SUBI32,  // signed, < 32 bits
	I32,     // signed, 32 bit
	SUBI64,  // signed, 32 < bits < 64
	I64,     // signed, 64 bit
	SUBU32,  // unsigned, < 32 bits
	U32,     // unsigned, 32 bits
	SUBU64,  // unsigned, 32 < bits < 64
	U64      // unsigned, 64 bits
}
def rankOf(signed: bool, width: byte) -> IntRank {
	if (width < 32) return if(signed, IntRank.SUBI32, IntRank.SUBU32);
	if (width == 32) return if(signed, IntRank.I32, IntRank.U32);
	if (width < 64) return if(signed, IntRank.SUBI64, IntRank.SUBU64);
	return if(signed, IntRank.I64, IntRank.U64);
}
// Integer types "iNN" and "uNN", including "int", "byte", and "long".
class IntType extends Type {
	def signed: bool;
	def width: byte;
	def size = byte.view((7 + width) >> 3);
	def ishift = u5.view(32 - width);
	def lshift = u6.view(64 - width);
	def rank = rankOf(signed, width);

	new(signed, width) super(TypeHash.do0(Kind.INT, if(signed, width | u25.!(0x100u), width))) { }
}

// Floating point types "float" and "double".
class FloatType extends Type {
	def total_width: byte;
	def fraction_width: byte;
	def is64 = total_width == 64;

	new(total_width, fraction_width) super(TypeHash.do0(Kind.FLOAT, total_width)) { }
}

// Indexed types "Array<T>", "array<T>", "Range<T>", "range<T>" and "seq<T>".
class IndexedType extends Type {
	def writable: bool;
	def elemType: Type;

	new(hash: u32, writable, elemType) super(hash) { }
}

// Array types "Array<T>" and "array<T>".
class ArrayType extends IndexedType {
	new(hash: u32, writable: bool, elemType: Type) super(hash, writable, elemType) { }
}

// Range types "Range<T>" and "range<T>".
class RangeType extends IndexedType {
	new(hash: u32, writable: bool, elemType: Type) super(hash, writable, elemType) { }
}

// Sequence types "seq<T>"
class SeqType extends IndexedType {
	new(hash: u32, elemType: Type) super(hash, false, elemType) { }
}

// Declared component types; the "C" in "component C { }".
class ComponentType extends Type {
	def decl: VstComponent;

	new(decl) super(TypeHash.do0(Kind.COMPONENT, u25.view(decl.uid))) { }
}

// Declared class types; the "C" in "class C<T> { }".
class ClassType extends Type {
	def decl: VstClass;
	def typeArgs: Array<Type>;
	def depth = decl.depth;
	private var superType: ClassType;

	new(hash: u32, decl, typeArgs) super(hash) { }

	def getSuperType() -> ClassType {
		if (superType != null) return superType;
		var s = decl.superClass;
		if (s == null) return null;
		if (typeArgs.length == 0) return superType = s;
		return superType = ClassType.!(s.substParams(decl.typeParams, typeArgs));
	}
}

// Declared variant types; the "V" in "type V<T> { case C }".
class VariantType extends Type {
	def decl: VstVariant;
	def typeArgs: Array<Type>;
	private def cases = Array<VariantCaseType>.new(decl.cases.length);

	new(hash: u32, decl, typeArgs) super(hash) { }

	def getCase(c: VstCaseMember) -> VariantCaseType {
		var t = cases[c.index];
		if (t == null) {
			var hash = TypeHash.do1(Kind.VARIANT_CASE, u25.view(c.index), this);
			return cases[c.index] = VariantCaseType.new(hash, c, this);
		}
		return t;
	}
}
// Declared variant type case; the "C" in "type V { case C }".
class VariantCaseType extends Type {
	def decl: VstCaseMember;
	def superType: VariantType;

	new(hash: u32, decl, superType) super(hash) { }
}

// Declared data types; the "D" in "type D<T>() { }".
class DataType extends Type {
	def decl: VstData;
	def typeArgs: Array<Type>;

	new(hash: u32, decl, typeArgs) super(hash) { }
}

// Types of closures at the source level; "T -> T". Distinguished from function
// types {FuncType}, which are used internally in later phases of the compiler.
class ClosureType extends Type {
	def sig: Signature;

	new(hash: u32, sig) super(hash) { }

	def paramType() -> Type;
	def returnType() -> Type;
}

// Function types that are used after closures have been lowered to receiver, code
// pointer pairs.
class FuncType extends Type {
	def sig: Signature;

	new(hash: u32, sig) super(hash) { }

	def paramType() -> Type;
	def returnType() -> Type;
}

// Tuple types "(T, T)".
class TupleType extends Type {
	def elemTypes: Array<Type>;

	new(hash: u32, elemTypes) super(hash) { }
}

// Declared type parameters; the "T" in "class C<T> { }".
class TypeParamType extends Type {
	def index: int;

	new(index) super(TypeHash.HAS_TYPE_PARAMS | TypeHash.do0(Kind.TYPE_PARAM, u25.view(index))) { }
}

// Type variables introduced during type inference; the implicit type argument
// "`T" in an expression such as "m<`T>".
class TypeVarType(typeParam: TypeParamType) extends Type {
	def uid = Uid.uid++;
	var solution: Type;
	var error: bool;
	var error_msg: string;

	new() super(TypeHash.HAS_TYPE_VARS | TypeHash.do0(Kind.TYPE_VAR, 1)) { }
}

// Declared enum types; the "E" in "enum E { }".
class EnumType extends Type {
	def decl: VstEnum;
	def intRep: IntType = IntTypeCache.get(false,
		byte.view(Ints.log(u32.view(decl.cases.length))));

	new(decl) super(TypeHash.do0(Kind.ENUM, u25.view(decl.uid))) { }
}

// Enum set types; the type "E.set" if "E" is a declared enum.
class EnumSetType extends Type {
	def decl: VstEnum;
	def intRep: IntType = IntTypeCache.get(false, byte.view(decl.cases.length));

	new(decl) super(TypeHash.do0(Kind.ENUM_SET, u25.view(decl.uid))) { }
}

// Declared type aliases; the "X" in "type X<T> = type".
class AliasType extends Type {
	def decl: VstAlias;
	def typeArgs: Array<Type>;
	def alias: Type;

	new(hash: u32, decl, typeArgs, alias) super(hash) { }
}

// The type of pointers used internally in the compiler.
class PointerType extends Type {
	def space: AddressSpace;
	def width: byte;

	new(space, width) super(TypeHash.do0(Kind.POINTER, width)) { }
}

// The type of the "null" expression.
class NullType extends Type {
	new() super(TypeHash.do0(Kind.NULL, Kind.NULL.tag)) { }
}

// Types like CiRuntime, System, and Kernel.
class InternalType(name: string) extends Type {
	new() super(TypeHash.do0(Kind.VOID, u25.view(Strings.hash(name)))) { }
}

def render0(t: Type, buf: StringBuilder) -> StringBuilder {
	match (t) {
		x: VoidType => {
			buf.puts("void");
		}
		x: BoolType => {
			buf.puts("bool");
		}
		x: IntType => {
			if (x.signed && x.width == 32) buf.puts("int");
			else if (x.signed && x.width == 64) buf.puts("long");
			else if (!x.signed && x.width == 8) buf.puts("byte");
			else buf.put2("%c%d", if(x.signed, 'i', 'u'), int.!(x.width));
		}
		x: FloatType => {
			buf.puts(if(x.is64, "double", "float"));
		}
		x: ArrayType => {
			buf.putc(if(x.writable, 'A', 'a'));
			buf.puts("rray<");
			x.elemType.render(buf);
			buf.puts(">");
		}
		x: RangeType => {
			buf.putc(if(x.writable, 'R', 'r'));
			buf.puts("ange<");
			x.elemType.render(buf);
			buf.puts(">");
		}
		x: SeqType => {
			buf.puts("seq<");
			x.elemType.render(buf);
			buf.puts(">");
		}
		x: ComponentType => {
			x.decl.render(buf);
		}
		x: ClassType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: VariantType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: VariantCaseType => {
			x.superType.render(buf);
			buf.puts(".");
			x.decl.render(buf);
		}
		x: DataType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: ClosureType => {
			renderF(x.sig.params, buf);
			buf.puts(" -> ");
			renderF(x.sig.results, buf);
		}
		x: FuncType => {
			renderF(x.sig.params, buf);
			buf.puts(" *-> ");
			renderF(x.sig.results, buf);
		}
		x: TupleType => {
			buf.puts("(");
			renderA(x.elemTypes, buf);
			buf.puts(")");
		}
		x: TypeParamType => {
			buf.put1("`tp%d", x.index);
		}
		x: TypeVarType => {
			buf.put1("`tv%d", x.uid);
			if (x.typeParam != null) buf.put1("(`tp%d)", x.typeParam.index);
			if (x.solution != null) x.solution.render(buf.putc('='));
		}
		x: EnumType => {
			x.decl.render(buf);
		}
		x: EnumSetType => {
			x.decl.render(buf);
			buf.puts(".set");
		}
		x: AliasType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: PointerType => {
			buf.put1("$ptr%d", int.!(x.width));
		}
		x: NullType => {
			buf.puts("null");
		}
		x: InternalType => {
			buf.puts(x.name);
		}
	}
	return buf;
}
def renderP(at: Array<Type>, buf: StringBuilder) -> StringBuilder {
	if (at.length == 0) return buf;
	buf.puts("<");
	renderA(at, buf);
	buf.puts(">");
	return buf;
}
def renderF(at: Array<Type>, buf: StringBuilder) -> StringBuilder {
	if (at.length == 0) return buf.puts("void");
	if (at.length == 1) {
		var t = at[0];
		if (FuncType.?(t) || ClosureType.?(t)) {
			buf.puts("(");
			t.render(buf);
			buf.puts(")");
		} else {
			t.render(buf);
		}
		return buf;
	}
	buf.puts("(");
	renderA(at, buf);
	buf.puts(")");
	return buf;
}
def renderA(at: Array<Type>, buf: StringBuilder) -> StringBuilder {
	for (i < at.length) {
		if (i > 0) buf.puts(", ");
		at[i].render(buf);
	}
	return buf;
}

// ----------------------------------------------------------------------------------
// - Type substitution
// ----------------------------------------------------------------------------------
class TypeSubst(typeParams: Array<TypeParamType>, typeArgs: Array<Type>,
	typeVar: TypeVarType -> Type) {
}
def recursiveSubst(t: Type, f: TypeSubst) -> Type {
	if (!t.polymorphic()) return t;
	match (t) {
		x: ArrayType => {
			var st = recursiveSubst(x.elemType, f);
			return if(st == x.elemType, x, ArrayTypeCache.get2(x.writable, st));
		}
		x: RangeType => {
			var st = recursiveSubst(x.elemType, f);
			return if(st == x.elemType, x, RangeTypeCache.get(x.writable, st));
		}
		x: SeqType => {
			var st = recursiveSubst(x.elemType, f);
			return if(st == x.elemType, x, SeqTypeCache.get(st));
		}
		x: ClassType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		x: VariantType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		x: ClosureType => {
			var st = substSig(x.sig, f);
			return if(st == x.sig, x, ClosureTypeCache.get(st));
		}
		x: FuncType => {
			var st = substSig(x.sig, f);
			return if(st == x.sig, x, FuncTypeCache.get(st));
		}
		x: TupleType => {
			var st = substArray(x.elemTypes, f);
			return if(st == x.elemTypes, x, TupleTypeCache.get(st));
		}
		x: TypeParamType => {
			if (f.typeParams == null) return x;
			var i = x.index;
			if (i < f.typeParams.length && f.typeParams[i] == x) return f.typeArgs[i];
			return x;
		}
		x: TypeVarType => {
			if (f.typeVar == null) return x;
			return f.typeVar(x);
		}
		x: AliasType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		_ => return t;
	}
}
def substArray(at: Array<Type>, f: TypeSubst) -> Array<Type> {
	var len = at.length;
	for (i < len) {
		var t = at[i], st = recursiveSubst(t, f);
		if (t != st) {
			// first mismatch; allocate new array and copy
			var nt = Array<Type>.new(at.length);
			for (j < i) nt[j] = at[j];
			nt[i] = st;
			for (j = i + 1; j < len; j++) nt[j] = recursiveSubst(at[j], f);
			return nt;
		}
	}
	return at;
}
def substSig(sig: Signature, f: TypeSubst) -> Signature {
	var pt = substArray(sig.params, f);
	var rt = substArray(sig.results, f);
	if (pt != sig.params) return Signature.new(pt, rt);
	if (rt != sig.results) return Signature.new(pt, rt);
	return sig;
}
def elimTypeVars(t: Type, error: TypeVarType -> Type) -> Type {
	match (t) {
		x: TypeVarType => return if (x.solution == null, error(x), x.solution);
		_ => return t;
	}
}
