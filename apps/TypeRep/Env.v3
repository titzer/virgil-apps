class Env {
	def reset();
	def enterScope() -> int;
	def exitScope(prevStart: int);

	def lookup(id: string) -> Binding {
		return Binding.None;
	}
	def bindVar(name: string, v: VarDecl);
	def bindType(name: string, t: Type);
	def bindComponent(decl: VstComponent);
	def bindClass(decl: VstClass);
	def bindVariant(decl: VstVariant);

	def resolve(tref: VstTypeRef) -> Type {
		if (tref.binding != null) return tref.binding;
		match (tref) {
			x: VstFuncTypeRef => {
				var pt = unpackTuple(resolve(x.paramType));
				var rt = unpackTuple(resolve(x.returnType));
				return ClosureTypeCache.get(Signature.new(pt.1, rt.1)); // TODO: cache tuple in signature
			}
			x: VstTupleTypeRef => {
				var nested = Arrays.map(x.nested.array(), resolve);
				return TupleTypeCache.get(nested);
			}
			x: VstNamedTypeRef => {
				var nested = if(x.nested != null, Lists.map(x.nested.list, resolve));
				var binding = lookup(x.name.image);
				match (binding) {
					None,
					Local,
					ThisField,
					SuperField,
					ComponentField,
					FileField,
					Const => error();

					Void => return checkTypeArg0(GlobalTypeCache.VOID, tref);
					Type(t) => return checkTypeArg0(t, tref);
					ComponentDecl(decl) => return checkTypeArg0(decl.getCachedType(), tref);
					ClassDecl(decl) => return checkTypeArgs(decl.getCachedType, tref);
					VariantDecl(decl) => return checkTypeArgs(decl.getCachedType, tref);
					DataDecl(decl) => return checkTypeArgs(decl.getCachedType, tref);
					// XXX: cache closures over writable
					Ref(writable) => error(); // TODO: look up a type or a struct or a memory type
					ArrayTypeCon(writable) => return checkTypeArg1(ArrayTypeCache.get2(writable, _), tref);
					RangeTypeCon(writable) => return checkTypeArg1(RangeTypeCache.get(writable, _), tref);
					SeqTypeCon => return checkTypeArg1(SeqTypeCache.get, tref);
				}
			}
		}
		return tref.binding;
	}
	def checkTypeArg0(t: Type, tref: VstTypeRef) -> Type; // TODO
	def checkTypeArgs(f: Array<Type> -> Type, tref: VstTypeRef) -> Type; // TODO
	def checkTypeArg1(f: Type -> Type, tref: VstTypeRef) -> Type; // TODO
	def error() -> Type; // TODO
}
def unpackTuple(t: Type) -> (Type, Array<Type>) {
	match (t) {
		x: TupleType => return (x, x.elemTypes);
		x: VoidType => return (x, GlobalTypeCache.NONE);
		_ => return (t, [t]);
	}
}

// Scopes:
// + Language			(types, typecons)
//  + Runtime			(decls)
//  + Program			(decls)
//   + file			(fields, methods)
//    + method					    <---+
//     + type params		(types)			|
//      + params		(vars)			|
//       + body			(vars, funcs)		|
//        + nested func +-------------------------------+
//    + compound
//     + typeenv 		(types)
//      + params 		(vars)
//       + init 		(vars)
//       + super 		(members)
//        + members 		(members)
//         + method				    <---+
//          + typeenv 		(types)			|
//           + params 		(this, vars)		|
//            + body 		(vars, funcs)		|
//             + nested func +--------------------------+

type Binding {
	case None;
	case Local(decl: VarDecl);
	case ThisField(decl: VstField);
	case SuperField(decl: VstField);
	case ComponentField(decl: VstField);
	case FileField(decl: VstField);

	case ComponentDecl(decl: VstComponent);
	case ClassDecl(decl: VstClass);
	case VariantDecl(decl: VstVariant);
	case DataDecl(decl: VstVariant);

	case Void;
	case Const(v: Val, vtype: Type);
	case Type(t: Type);
	case Ref(writable: bool);
	case ArrayTypeCon(writable: bool);
	case RangeTypeCon(writable: bool);
	case SeqTypeCon;
}

type MemberBinding {
	case Const(v: Val, vtype: Type);
	case Type(t: Type);

	case ComponentField(member: VstField);
	case ComponentMethod(member: VstMethod);

	case ClassField(member: VstField);
	case ClassMethod(member: VstMethod);
	case ClassNew(member: VstNew);

	case VariantField(member: VstField);
	case VariantMethod(member: VstMethod);
	case VariantCase(member: VstCaseMember);

	case DataField(member: VstField);
	case DataMethod(member: VstMethod);

	case EnumCase(member: VstEnumCase);
	case EnumField(field: VstField);

	case Infix(op: Infix);
	case Operator(op: Operator);
	case Partial(op: Operator);
	case PtrAtField(member: VstMember);
}

type VstMember {}
type VstEnumCase {}
type Infix {}
