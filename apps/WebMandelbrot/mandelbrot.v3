// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def WIDTH = 1200;
def HEIGHT = 800;
var image: Array<byte>;

def makeImage() -> Array<byte> {
	if (image == null) image = Array<byte>.new(WIDTH * HEIGHT * 4);
	return image;
}

def colour(iteration: int, offset: int, scale: int) -> byte {
	iteration = ((iteration * scale) + offset) % 1024;
	if (iteration < 256) {
		return byte.view(iteration);
	} else if (iteration < 512) {
		return byte.view(255 - (iteration - 255));
	}
	return 0;
}

def iterateEquation(x0: double, y0: double, maxiterations: int) -> int {
	var a = 0.0d, b = 0.0d, rx = 0.0d, ry = 0.0d;
	var iterations = 0;
	while (iterations < maxiterations && (rx * rx + ry * ry <= 4.0)) {
		rx = a * a - b * b + x0;
		ry = 2.0 * a * b + y0;
		a = rx;
		b = ry;
		iterations++;
	}
	return iterations;
}

def scale(domainStart: double, domainLength: double, screenLength: int, step: int) -> double {
	return domainStart + domainLength * (double.roundi(step - screenLength) / double.roundi(screenLength));
}

// Exported: renders the mandelbrot set into the image data.
def mandelbrot(maxIterations: int, cx: double, cy: double, diameter: double) {
	def verticalDiameter = diameter * HEIGHT / WIDTH;
	var image = makeImage();
	for (x < WIDTH) {
		for (y < HEIGHT) {
			// map to mandelbrot coordinates
			var rx = scale(cx, diameter, WIDTH, x);
			var ry = scale(cy, verticalDiameter, HEIGHT, y);
			var iterations = iterateEquation(rx, ry, maxIterations);
			var idx = ((x + y * WIDTH) * 4);
			// set the red and alpha components
			image[idx] = if(iterations == maxIterations, 0, colour(iterations, 0, 4));
			image[idx + 1] = if(iterations == maxIterations, 0, colour(iterations, 128, 4));
			image[idx + 2] = if(iterations == maxIterations, 0, colour(iterations, 356, 4));
			image[idx + 3] = 255;
		}
	}
}

// Exported: gets a pointer into the image data.
def getImage() -> Pointer {
	return Pointer.atContents(makeImage());
}

// Exported: gets the image height.
def getImageHeight() -> int {
	return HEIGHT;
}

// Exported gets the image width.
def getImageWidth() -> int {
	return WIDTH;
}

// Unused.
def main() {
}

export mandelbrot;
export getImage;
export getImageHeight;
export getImageWidth;