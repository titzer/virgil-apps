// Copyright 2020 Ben L. Titzer. All rights reserved.

// Virgil implementation of the "nbody" benchmark from the Computer Language Shootout.
// A straightforward translation from the C version.

class Planet {
	var x: double;
	var y: double;
	var z: double;

	var vx: double;
	var vy: double;
	var vz: double;

	def mass: double;

	new(x, y, z, vx, vy, vz, mass) { }
}

def PI = 3.141592653589793d;
def SOLAR_MASS = 39.47841760435743d; // (4d * PI * PI);
def DAYS_PER_YEAR = 365.24d;

def advance(bodies: Array<Planet>, dt: double) {
	for (i < bodies.length) {
		var b = bodies[i];
		for (j = i + 1; j < bodies.length; j++) {
			var b2 = bodies[j];
			var dx = b.x - b2.x; // XXX: LICM possible
			var dy = b.y - b2.y;
			var dz = b.z - b2.z;
			var distance = double.sqrt(dx * dx + dy * dy + dz * dz);
			var mag = dt / (distance * distance * distance); // XXX: distance * sqrt(distance)
			b.vx -= dx * b2.mass * mag;
			b.vy -= dy * b2.mass * mag;
			b.vz -= dz * b2.mass * mag;
			b2.vx += dx * b.mass * mag;
			b2.vy += dy * b.mass * mag;
			b2.vz += dz * b.mass * mag;
		}
	}
	for (b in bodies) {
		b.x += dt * b.vx;
		b.y += dt * b.vy;
		b.z += dt * b.vz;
	}
}

def energy(bodies: Array<Planet>) -> double {
	var e = 0.0d;
	for (i < bodies.length) {
		var b = bodies[i];
	 	e += 0.5 * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz);
		for (j = i + 1; j < bodies.length; j++) {
			var b2 = bodies[j];
			var dx = b.x - b2.x;
			var dy = b.y - b2.y;
			var dz = b.z - b2.z;
			var distance = double.sqrt(dx * dx + dy * dy + dz * dz);
			e -= (b.mass * b2.mass) / distance;
		}
	}
	return e;
}

def offset_momentum(bodies: Array<Planet>) {
	var px = 0.0, py = 0.0, pz = 0.0;
	for (b in bodies) {
		px += b.vx * b.mass;
		py += b.vy * b.mass;
		pz += b.vz * b.mass;
	}
	var first = bodies[0];
	first.vx = 0.0 - px / SOLAR_MASS;
	first.vy = 0.0 - py / SOLAR_MASS;
	first.vz = 0.0 - pz / SOLAR_MASS;
}

def makeBodies() -> Array<Planet> { // XXX: make global constant
	return [
		Planet.new(0, 0, 0, 0, 0, 0, SOLAR_MASS), 	// Sun
		Planet.new(					// Jupiter
			4.84143144246472090e+0,
			-1.16032004402742839e+0,
			-1.03622044471123109e-1,
			1.66007664274403694e-3 * DAYS_PER_YEAR,
			7.69901118419740425e-3 * DAYS_PER_YEAR,
			-6.90460016972063023e-5 * DAYS_PER_YEAR,
			9.54791938424326609e-4 * SOLAR_MASS
		),
		Planet.new(					// Saturn
			8.34336671824457987e+0,
			4.12479856412430479e+0,
			-4.03523417114321381e-1,
			-2.76742510726862411e-3 * DAYS_PER_YEAR,
			4.99852801234917238e-3 * DAYS_PER_YEAR,
			2.30417297573763929e-5 * DAYS_PER_YEAR,
			2.85885980666130812e-4 * SOLAR_MASS
		),
		Planet.new(					// Uranus
			1.28943695621391310e+1,
			-1.51111514016986312e+1,
			-2.23307578892655734e-1,
			2.96460137564761618e-3 * DAYS_PER_YEAR,
			2.37847173959480950e-3 * DAYS_PER_YEAR,
			-2.96589568540237556e-5 * DAYS_PER_YEAR,
			4.36624404335156298e-5 * SOLAR_MASS
		),
		Planet.new(					// Neptune
			1.53796971148509165e+1,
			-2.59193146099879641e+1,
			1.79258772950371181e-1,
			2.68067772490389322e-3 * DAYS_PER_YEAR,
			1.62824170038242295e-3 * DAYS_PER_YEAR,
			-9.51592254519715870e-5 * DAYS_PER_YEAR,
			5.15138902046611451e-5 * SOLAR_MASS
		)
	];
}

def printd9ln(v: double) {
	var bits = u64.view(v);
	if ((bits >> 63) != 0) System.putc('-');
	v = double.view(bits & ~(1uL << 63));
	if (v == double.infinity) return System.puts("Infinity");
	if (v != v) return System.puts("NaN");
	var mag = 1d;
	while ((mag * 10d) < v) mag = mag * 10d;
	while (mag > 1e-9) {
		var digit = int.truncd(v / mag);
		System.puti(digit);
		if (mag == 1d) System.putc('.');
		v -= mag * digit;
		mag = mag / 10;
	}
	// TODO: round last digit properly
	System.ln();
}

def main(args: Array<string>) -> int {
	var n = Util.intArg(args, 1);
	var bodies = makeBodies();
	offset_momentum(bodies);
	printd9ln(energy(bodies));
	for (i < n) advance(bodies, 0.01);
	printd9ln(energy(bodies));
	return 0;
}