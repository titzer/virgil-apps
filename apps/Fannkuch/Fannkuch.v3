// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This program is adapted from the programming language shootout
// benchmarks and is used to measure the impact of various compiler
// optimizations on run time performance. The primary operations
// are array permutations.
component Fannkuch {
	var MAX = 20;

	var fperm    = Array<int>.new(MAX);
	var fperm1   = Array<int>.new(MAX);
	var fcount   = Array<int>.new(MAX);
	var fmaxPerm = Array<int>.new(MAX);

	def fannkuch(n: int) -> int {
		var check = 0;
		var maxFlipsCount = 0;
		var m = n - 1;

		var perm = fperm;
		var perm1 = fperm1;
		var count = fcount;

		for (i < n) perm1[i] = i;

		var r = n;

		while (true) {
			// write-out the first 30 permutations
			if (check < 30) {
				for (i < n) System.puti(perm1[i] + 1);
				System.ln();
				check++;
			}

			while (r != 1) { 
				count[r - 1] = r; 
				r = r - 1; 
			}

			if (!(perm1[0] == 0 || perm1[m] == m)) {
				copy(perm, perm1, n);

				var flipsCount = 0;
				var k = perm[0];

				while (k != 0) {
					var k2 = (k + 1) / 2;
					for (j < k2) {
						var temp = perm[j]; 
						perm[j] = perm[k - j]; 
						perm[k - j] = temp;
					}
					flipsCount++;
					k = perm[0];
				}

				if (flipsCount > maxFlipsCount) {
					maxFlipsCount = flipsCount;
					copy(fmaxPerm, perm1, n);
				}
			}

			while (true) {
				if (r == n) return maxFlipsCount;
				var perm0 = perm1[0];
				for (i < r) {
					perm1[i] = perm1[i + 1];
				}
				perm1[r] = perm0;

				count[r] = count[r] - 1;
				if (count[r] > 0) break;
				r++;
			}
		}
		return maxFlipsCount;
	}
	def main(args: Array<Array<byte>>) -> int {
		var max = 6;
		if (args.length > 0) max = Int.parse(args[0]);
		fannkuch(max);
		return 0;
	}
	def copy(a: Array<int>, b: Array<int>, n: int) {
		for (j < n) a[j] = b[j];
	}
}
