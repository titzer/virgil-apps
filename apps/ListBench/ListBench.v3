// A simple benchmark that uses cons Lists to benchmark polymorphism.
component ListBench {
	def visit = false;
	var intCount: int;
	var tupleCount: int;
	var stringCount: int;
	var checksum: int;

	def strings = [
		"A", "scientific", "truth", "does", "not", "triumph", "by", "convincing", 
		"its", "opponents", "and", "making", "them", "see", "the", "light,", "but", 
		"rather", "because", "its", "opponents", "eventually", "die", "and", "a", 
		"new", "generation", "grows", "up", "that", "is", "familiar", "with", "it.",
		"--Max", "Planck"
	];

	def main(args: Array<string>) -> int {
		if (args.length < 3) {
			System.puts("Usage: ListBench <intCount> <tupleCount> <stringCount>\n");
			return 1;
		}
		intCount = Int.parse(args[0]);
		tupleCount = Int.parse(args[1]);
		stringCount = Int.parse(args[2]);

		for (i < 5000) doBench();

		System.puti(checksum);
		System.ln();
		return 0;
	}
	def doBench() {
		var intList: List<int>;
		for (i < intCount) {
			intList = List.new(i, intList);
		}
		if (visit) for (l = intList; l != null; l = l.tail) {
			checksum = checksum + l.head;
		}

		var tupleList: List<(int, int)>;
		for (i < tupleCount) {
			tupleList = List.new((i, i + 13), tupleList);
		}
		if (visit) for (l = tupleList; l != null; l = l.tail) {
			checksum = checksum + l.head.0;
		}

		var stringList: List<string>;
		for (i < stringCount) {
			stringList = List.new(strings[i % strings.length], stringList);
		}
		if (visit) for (l = stringList; l != null; l = l.tail) {
			checksum = checksum + l.head.length;
		}
	}
}
// A simple cons list.
class List<T> {
	def head: T;
	def tail: List<T>;
	new(head, tail) {}
}
