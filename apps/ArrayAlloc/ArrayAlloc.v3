def main(args: Array<string>) {
	var count = 1000;
	if (args.length > 0) count = Int.parse(args[0]);

	time("Array<byte>.new(16)", count, Array<byte>.new, 16);
	time("Array<byte>.new(64)", count, Array<byte>.new, 64);
	time("Array<byte>.new(256)", count, Array<byte>.new, 256);

	time("Array<int>.new(16)", count, Array<int>.new, 16);
	time("Array<int>.new(64)", count, Array<int>.new, 64);
	time("Array<int>.new(256)", count, Array<int>.new, 256);

	time("Point.new x 4", count, allocPoints, 4);
	time("Point.new x 16", count, allocPoints, 32);
	time("Point.new x 64", count, allocPoints, 128);
	
	time("Array<Point>.new(4)", count, allocPointArray, 4);
	time("Array<Point>.new(16)", count, allocPointArray, 16);
	time("Array<Point>.new(64)", count, allocPointArray, 64);

}

class Point(x: int, y: int) { }

def time<R>(name: string, count: int, f: int -> R, p: int) {
	System.puts(name);
	System.puts(" x ");
	System.puti(count);
	System.puts(": ");
	for (i = name.length; i < 24; i++) System.puts(" ");
	var before = System.ticksUs();
	for (i < count) f(p);
	var diff = System.ticksUs() - before;
	System.puti(diff);
	System.puts(" us\n");
}

def allocPointArray(size: int) -> Array<Point> {
	var a = Array<Point>.new(size);
	for (i < size) a[i] = Point.new(i, size);
	return a;
}

def allocPoints(size: int) -> Point {
	var p: Point;
	for (i < size) p = Point.new(i, size);
	if ((p.x + p.y) > 0) return null; 
	return p;
}