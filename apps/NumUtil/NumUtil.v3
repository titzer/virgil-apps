// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A number utility that can print decimal, hexadecimal, binary, etc.
def hexBytes    = "0123456789ABCDEF";
def INT_WIDTH   = 32;
def INT_WIDTH_4 = INT_WIDTH / 4;
def INT_WIDTH_3 = INT_WIDTH / 3;
def MAX_VALUE   = 2147483647;
def MIN_VALUE   = -2147483648;
def MAX_DIV     = MAX_VALUE / 10;
def MIN_DIV     = MIN_VALUE / 10;
def MAX_DIG     = MAX_VALUE % 10;
def MIN_DIG     = 0 - (MIN_VALUE % 10);

// constants for formats
def BIN = 0;
def OCT = 1;
def DEC = 2;
def HEX = 3; 
def IP4 = 4;

var parseErrorPos: int;
var format: int;

def main(args: Array<string>) {
	for (i < args.length) {
		var val = parse(args[i]);
		var r = reportParseError(args[i], i) || printInt(val);
	}
}
def compare(a: string, b: string) -> bool {
	if (a == b) return true;
	if (a.length != b.length) return false;
	for (i < a.length) {
		if (a[i] != b[i]) return false;
	}
	return true;
}
def reportParseError(a: string, index: int) -> bool {
	if (parseErrorPos >= 0) {
		System.puts("ParseError @ ");
		System.puti(index);
		System.puts(": \"");
		System.puts(a);
		System.puts("\"\n");
		return true;
	}
	return false;
}
def parse(a: string) -> int {
	parseErrorPos = -1;
	if (a.length < 1) return 0;

	var a0 = a[0];
	if (a0 == '0') {
		if (a.length == 1) {
			format = DEC;
			return 0;
		} if (a.length >= 2) {
			if (a[1] == 'x' || a[1] == 'X') return parseHex(a, 2);
			if (a[1] == 'b' || a[1] == 'B') return parseBin(a, 2);
		}
		return parseOct(a, 0);
	}
	if (a0 == '-') {
		// assume a negative decimal
		if (compare("-2147483648", a)) {
			format = DEC;
			return MIN_VALUE;
		}
		return parseDec(a, 1, a.length, true);
	}
	for (i < a.length) {
		if (a[i] == '.') return parseIp(a, 0);
		if (isHexLetter(a[i])) return parseHex(a, 0);
	}
	return parseDec(a, 0, a.length, false);
}
def parseHex(a: string, start: int) -> int {
	format = HEX;
	var max = a.length, accum = 0;
	for (i = start; i < max; i++) {
		var dval = hexValue(a[i]);
		if (dval < 0 || (i - start) >= 8) return parseError(i);
		accum = accum * 16 + dval;
	}
	return accum;
}
def parseBin(a: string, start: int) -> int {
	format = BIN;
	var max = a.length, accum = 0;
	for (i = start; i < max; i++) {
		if (i > INT_WIDTH + 1) return parseError(i);
		accum = accum * 2;
		if (a[i] == '1') accum = accum + 1;
		else if (a[i] != '0') return parseError(i);
	}
	return accum;
}
def parseDec(a: string, start: int, max: int, negative: bool) -> int {
	format = DEC;
	var accum = 0;
	for (i = start; i < max; i++) {
		var dval = int.!(a[i]) - '0';
		if (dval < 0 || dval > 9 || accum > MAX_DIV || accum == MAX_DIV && dval > MAX_DIG) return parseError(i);
		accum = accum * 10 + dval;
	}
	if (negative) return 0 - accum;
	return accum;
}
def parseOct(a: string, start: int) -> int {
	format = OCT;
	var accum = 0, max = a.length;
	if (max < 1) return parseError(0);
	for (i = start; i < max; i++) {
		var dval = int.!(a[i]) - '0';
		if (dval < 0 || dval > 7 || i >= INT_WIDTH_3) return parseError(i);
		accum = accum * 8 + dval;
	}
	return accum;
}
def parseIp(a: string, start: int) -> int {
	format = IP4;
	var pos = start, val = 0;
	for (i < 4) {
		var part: int;
		if (i == 3) {
			part = parseDec(a, pos, a.length, false);
		} else {
			var end = pos;
			while (true) {
				if (end == a.length) return parseError(end);
				if (a[end] == '.') {
					part = parseDec(a, pos, end, false);
					pos = end + 1;
					break;
				} else if (a[end] < '0' || a[end] > '9') {
					return parseError(end);
				}
				end = end + 1;
			}
		}
		if (part < 0 || part > 255) return parseError(pos);
		val = val << 8 | part;
	}
	return val;
}
def printInt(a: int) -> bool {
	System.puts("decimal: ");
	System.puti(a);
	System.putc('\n');

	System.puts("hex:     ");
	printHex(a);
	System.putc('\n');

	System.puts("binary:  ");
	printBinary(a);
	System.putc('\n');

	System.puts("octal:   ");
	printOctal(a);
	System.putc('\n');

	System.puts("ipv4:    ");
	printIp(a);
	System.putc('\n');

	System.puts("f32:     ");
	printF32(a);
	System.putc('\n');

	if (a >= 0) {
		System.puts("uleb128: ");
		printLeb128u(a);
		System.putc('\n');
	}
	System.puts("sleb128: ");
	printLeb128s(a);
	System.putc('\n');
	
	return true;
}
def isHexLetter(c: byte) -> bool {
	return (c >= 'a' && c <= 'f') || (c >= 'a' && c <= 'F');
}
def printHex(a: int) {
	for (i < 8) {
		System.putc(hexBytes[a >>> 28]);
		a <<= 4;
	}
}
def printBinary(a: int) {
	for (i < 32) {
		System.putc(hexBytes[a >>> 31]);
		a <<= 1;
	}
}
def printOctal(a: int) {
	for (i = 30; i >= 0; i -= 3) {
		var v = (a >>> byte.!(i)) & 0x7;
		System.putc(hexBytes[v]);
	}
}
def printIp(a: int) {
	for (i < 4) {
		var v = (a >>> 24) & 0xff;
		System.puti(v);
		if (i < 3) System.putc('.');
		a <<= 8;
	}
}
def printLeb128u(a: int) {
	var u = u32.!(a);
	while (true) {
		var v = int.!(u & 0x7F), n = u >> 7;
		var cont = n != 0;
		if (cont) v |= 0x80;
		System.putc(hexBytes[v >> 4]);
		System.putc(hexBytes[v & 0xF]);
		System.putc(' ');
		if (!cont) break;
		u = n;
	}
}
def printLeb128s(a: int) {
	while (true) {
		var v = a & 0x7F, n = a >> 7;
		var cont = (n != 0 && n != -1) || (a >= 0 && (v & 0x40) == 0x40);
		if (cont) v |= 0x80;
		System.putc(hexBytes[v >> 4]);
		System.putc(hexBytes[v & 0xF]);
		System.putc(' ');
		if (!cont) break;
		a = n;
	}
}
def printF32(a: int) {
	System.puti(a >>> 31);
	System.putc(':');
	var exp = ((a >>> 23) & 0xFF) - 128;
	System.puti(exp);
	System.putc(':');
	var m = a << 9;
	for (i < 6) {
		System.putc(hexBytes[m >>> 28]);
		m <<= 4;
	}
}
def hexValue(ch: byte) -> int {
	if (ch < '0')  return -1;
	if (ch <= '9') return int.!(ch) - '0';
	if (ch < 'A')  return -1;
	if (ch <= 'F') return 10 + int.!(ch) -'A';
	if (ch < 'a')  return -1;
	if (ch <= 'f') return 10 + int.!(ch) - 'a';
	return -1;
}
def parseError(pos: int) -> int {
	parseErrorPos = pos;
	return -1;
}

