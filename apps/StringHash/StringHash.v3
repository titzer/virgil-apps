// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component StringHash {
	def hashFun = [hash0, hash1, hash2, hash3, hash4];

	def main(args: Array<Array<byte>>) -> int {
		if (args.length < 4) {
			System.puts("Usage: StringHash <hashfun> <repeat> <distrib> <inputfile>\n");
			return 1;
		}
		var hash = hashFun[Int.parse(args[0])];
		var max = Int.parse(args[1]);
		var distrib = Int.parse(args[2]);
		var input = parseInput(System.fileLoad(args[3]));
		if (input == null) {
			System.puts("File not found, or contains no data: ");
			System.puts(args[3]);
			System.ln();
			return 1;
		}
		var sum = 0;
		for (i < max) {
			sum = sum + computeHash(input, hash);
		}
		var symbols = buildSymbolCache(input).1;
		distrib = (sum + distrib) & 0x3FF;
		if (distrib > 0) analyzeDistrib(input, hash, distrib);
		if (distrib > 0) analyzeDistrib2(symbols, distrib);
		return 0;
	}
	def computeHash(list: List<string>, hash: string -> int) -> int {
		var sum = 0;
		for (l = list; l != null; l = l.tail) {
			sum = sum + hash(l.head);
		}
		return sum;
	}
	def parseInput(data: Array<byte>) -> List<Array<byte>> {
		if (data == null) return null;
		var s = 0, max = data.length, list: List<Array<byte>> = null;
		for (i < max) {
			if (data[i] == '\n' || i == max - 1) {
				var array = Array<byte>.new(i - s + 1);
				for (j = s; j < i; j++) array[j - s] = data[j];
				list = List<Array<byte>>.new(array, list);
				s = i + 1;
			}
		}
		return list;
	}
	def applyHash(list: List<Array<byte>>, hash: string -> int) {
	}
	def buildSymbolCache(list: List<Array<byte>>) -> (SymbolCache, List<Symbol>) {
		var cache = SymbolCache.new();
		var symbols: List<Symbol> = null;
		for (l = list; l != null; l = l.tail) {
			symbols = List<Symbol>.new(cache.get(l.head), symbols);
		}
		return (cache, symbols);
	}
	def analyzeDistrib(list: List<Array<byte>>, hash: string -> int, size: int) {
		var map = HashMap<string, bool>.new(hash0, equal);
		var distrib = Array<int>.new(size);
		for (l = list; l != null; l = l.tail) {
			if (!map.get(l.head)) {
				var val = hash(l.head);
				var index = int.!(2147483647 & val) % size;
				map.set(l.head, true);
				distrib[index] = distrib[index] + 1;
			}
		}
		for (i < distrib.length) {
			if (i > 0) System.putc(' ');
			System.puti(distrib[i]);
		}
		System.ln();
	}
	def analyzeDistrib2(list: List<Symbol>, size: int) {
		var map = HashMap<Symbol, bool>.new(symbolHash, symbolEqual);
		var distrib = Array<int>.new(size);
		for (l = list; l != null; l = l.tail) {
			if (!map.get(l.head)) {
				var index = l.head.hash % size;
				map.set(l.head, true);
				distrib[index] = distrib[index] + 1;
			}
		}
		for (i < distrib.length) {
			if (i > 0) System.putc(' ');
			System.puti(distrib[i]);
		}
		System.ln();
	}
	def equal(arr1: string, arr2: string) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) {
			if (arr1[i] != arr2[i]) return false;
		}
		return true;
	}
	def symbolHash(sym1: Symbol) -> int {
		return sym1.id;
	}
	def symbolEqual(sym1: Symbol, sym2: Symbol) -> bool {
		return sym1 == sym2;
	}
	def hash0(str: string) -> int {
		var max = str.length, hashval = 0;
		for (i < max) hashval = hashval * 31 + str[i];
		return hashval;
	}
	def hash1(str: string) -> int {
		var max = str.length;
		if (max > 6) {
			return max * 37 
				+ 3 * str[0] 
				+ 11 * str[3]
				+ 13 * str[2]
				+ 91 * str[max - 1];
		}
		var hashval = 0;
		for (i < max) hashval = hashval * 31 + str[i];
		return hashval;
	}
	def hash2(str: string) -> int {
		var max = str.length;
		if (max > 3) {
			return max * 37 
				+ 3 * str[0] 
				+ 11 * str[1]
				+ 91 * str[max - 1];
		}
		var hashval = 0;
		for (i < max) hashval = hashval * 31 + str[i];
		return hashval;
	}
	def hash3(str: string) -> int {
		var max = str.length;
		if (max == 1) return str[0];
		if (max > 3) {
			return max * 37 
				+ 3 * str[0] 
				+ 11 * str[1]
				+ 91 * str[max - 1];
		}
		var hashval = 0;
		for (i < max) hashval = hashval * 31 + str[i];
		return hashval;
	}
	def hash4(str: string) -> int {
		var max = str.length;
		if (max == 1) return str[0];
		if (max > 6) {
			return max * 37 
				+ 3 * str[0] 
				+ 13 * str[1]
				+ 17 * str[max / 2]
				+ 91 * str[max - 1];
		}
		var hashval = 0;
		for (i < max) hashval = hashval * 31 + str[i];
		return hashval;
	}
}

class List<T> {
	def head: T;
	def tail: List<T>;
	new(head, tail) {}
}

class Map<K, V> {
	def get(key: K) -> V;
	def set(key: K, val: V);
}

class PartialMap<K, V> extends Map<K, V> {
	def has(key: K) -> bool;
	def apply(func: (K, V) -> void);
}

class Bucket<K, V> {
	def key: K;
	var val: V;
	var next: Bucket<K, V>;

	new(key, val: V, next: Bucket<K,V>) {
		this.next = next;
		this.val = val;
	}
}

class HashMap<K, V> extends PartialMap<K, V> {
	def hash: K -> int;
	def equals: (K, K) -> bool;
	var table: Array<Bucket<K, V>>;
	def none: V;

	new(hash, equals) {
		this.table = Array<Bucket<K, V>>.new(19);
	}

	def get(key: K) -> V {
		var hashval = dohash(key);
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) return bucket.val;
		}
		return none;
	}
	def set(key: K, val: V) {
		var hashval = dohash(key);
		var bucket = table[hashval];
		var i = 0;
		while (bucket != null) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				break;
			}
			bucket = bucket.next;
			i = i + 1;
		}
		if (bucket == null) {
			table[hashval] = Bucket<K, V>.new(key, val, table[hashval]);
		}
		if (i > 5 && table.length < 3011) balance();
	}

	def has(key: K) -> bool {
		var hashval = dohash(key);
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) return true;
		}
		return false;
	}
	def apply(func: (K, V) -> void) {
		for (i < table.length) {
			for (bucket = table[i]; bucket != null; bucket = bucket.next) {
				func(bucket.key, bucket.val);
			}
		}
	}
	private def dohash(key: K) -> int {
		return int.!(2147483647 & hash(key)) % table.length;
	}
	private def balance() {
		var old = table;
		var nlen = table.length * 3 + 1;
		if (table.length > 100) nlen = table.length + 50;
		table = Array<Bucket<K, V>>.new(nlen);
		for (i < old.length) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = Bucket<K, V>.new(b.key, b.val, table[hashval]);
			}
		}
	}
}

class Symbol {
	def id: int;
	def hash: int;
	def str: string;
	var next: Symbol;
	new(id, hash, str) { }
}

class SymbolCache {
	def array: Array<Array<Symbol>> = Array<Array<Symbol>>.new(37);
	def zero: Symbol = Symbol.new(0, 0, "");
	var nextID: int = 1;

	def get(str: string) -> Symbol {
		// get a symbol for the specified string
		var len = str.length;
		if (len == 0) return zero;

		// hash the first byteacter to get an array
		var pos: int = (3 * str[0]) % 37;
		var farr = array[pos];

		// no array there; make one
		if (farr == null) array[pos] = farr = Array<Symbol>.new(13);

		// hash the string and search the buckets at that position in the array
		var hash = int.!(2147483647 & StringHash.hash0(str));
		var bucket = farr[hash % farr.length], i = 0;
		while (bucket != null) {
			if (bucket.hash == hash && StringHash.equal(bucket.str, str)) return bucket;
			bucket = bucket.next;
			i = i + 1;
		}

		// chains are becoming too long in this array, grow it
		if (i > 3) {
			array[pos] = farr = grow(farr);
		}

		// create a new symbol and insert it at the head of the bucket chain
		var nsym = Symbol.new(nextID, hash, str);
		var hpos = hash % farr.length;
		nsym.next = farr[hpos];
		farr[hpos] = nsym;
		nextID = nextID + 1;
		return nsym;
	}
	def grow(farr: Array<Symbol>) -> Array<Symbol> {
		// the array has become too dense, grow and spread out entries
		var narr = Array<Symbol>.new(farr.length * 3 + 2);
		for (i < farr.length) {
			var bucket = farr[i];
			while (bucket != null) {
				var next = bucket.next;
				var p = bucket.hash % narr.length;
				bucket.next = narr[p];
				narr[p] = bucket;
				bucket = next;
			}
		}
		return narr;
	}
}
